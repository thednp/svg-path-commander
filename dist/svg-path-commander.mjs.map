{"version":3,"file":"svg-path-commander.mjs","sources":["../node_modules/.pnpm/@thednp+dommatrix@2.0.11/node_modules/@thednp/dommatrix/dist/dommatrix.mjs","../src/options/options.ts","../src/parser/paramsCount.ts","../src/parser/finalizeSegment.ts","../src/parser/error.ts","../src/parser/scanFlag.ts","../src/parser/isDigit.ts","../src/parser/invalidPathValue.ts","../src/parser/scanParam.ts","../src/parser/isSpace.ts","../src/parser/skipSpaces.ts","../src/parser/isPathCommand.ts","../src/parser/isDigitStart.ts","../src/parser/isArcCommand.ts","../src/parser/isMoveCommand.ts","../src/parser/scanSegment.ts","../src/parser/pathParser.ts","../src/parser/parsePathString.ts","../src/process/absolutizeSegment.ts","../src/process/iterate.ts","../src/convert/pathToAbsolute.ts","../src/process/relativizeSegment.ts","../src/convert/pathToRelative.ts","../src/math/rotateVector.ts","../src/process/arcToCubic.ts","../src/process/quadToCubic.ts","../src/math/midPoint.ts","../src/process/lineToCubic.ts","../src/process/segmentToCubic.ts","../src/process/normalizeSegment.ts","../src/parser/paramsParser.ts","../src/convert/pathToCurve.ts","../src/math/roundTo.ts","../src/convert/pathToString.ts","../src/math/distanceSquareRoot.ts","../src/math/lineTools.ts","../src/math/arcTools.ts","../src/math/bezier.ts","../src/math/cubicTools.ts","../src/math/quadTools.ts","../src/math/polygonTools.ts","../src/util/distanceEpsilon.ts","../src/process/normalizePath.ts","../src/util/getPointAtLength.ts","../src/util/getTotalLength.ts","../src/util/getPropertiesAtLength.ts","../src/util/getPropertiesAtPoint.ts","../src/util/getClosestPoint.ts","../src/util/getPathArea.ts","../src/util/getDrawDirection.ts","../src/util/getPathBBox.ts","../src/util/getSegmentAtLength.ts","../src/util/getSegmentOfPoint.ts","../src/util/isPathArray.ts","../src/util/isAbsoluteArray.ts","../src/util/isNormalizedArray.ts","../src/util/isCurveArray.ts","../src/util/isPointInStroke.ts","../src/util/isRelativeArray.ts","../src/util/isValidPath.ts","../src/util/shapeParams.ts","../src/util/isElement.ts","../src/util/shapeToPathArray.ts","../src/util/shapeToPath.ts","../src/process/getSVGMatrix.ts","../src/process/shortenSegment.ts","../src/process/roundSegment.ts","../src/process/optimizePath.ts","../src/process/projection2d.ts","../src/process/reverseCurve.ts","../src/process/reversePath.ts","../src/process/roundPath.ts","../src/process/splitCubic.ts","../src/process/splitPath.ts","../src/process/transformPath.ts","../src/index.ts"],"sourcesContent":["var Z = Object.defineProperty;\nvar z = (s, t, e) => t in s ? Z(s, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : s[t] = e;\nvar p = (s, t, e) => z(s, typeof t != \"symbol\" ? t + \"\" : t, e);\nconst $ = {\n  a: 1,\n  b: 0,\n  c: 0,\n  d: 1,\n  e: 0,\n  f: 0,\n  m11: 1,\n  m12: 0,\n  m13: 0,\n  m14: 0,\n  m21: 0,\n  m22: 1,\n  m23: 0,\n  m24: 0,\n  m31: 0,\n  m32: 0,\n  m33: 1,\n  m34: 0,\n  m41: 0,\n  m42: 0,\n  m43: 0,\n  m44: 1,\n  is2D: !0,\n  isIdentity: !0\n}, E = (s) => (s instanceof Float64Array || s instanceof Float32Array || Array.isArray(s) && s.every((t) => typeof t == \"number\")) && [6, 16].some((t) => s.length === t), P = (s) => s instanceof DOMMatrix || s instanceof y || typeof s == \"object\" && Object.keys($).every((t) => s && t in s), g = (s) => {\n  const t = new y(), e = Array.from(s);\n  if (!E(e))\n    throw TypeError(\n      `CSSMatrix: \"${e.join(\",\")}\" must be an array with 6/16 numbers.`\n    );\n  // istanbul ignore else @preserve\n  if (e.length === 16) {\n    const [\n      n,\n      i,\n      r,\n      a,\n      l,\n      m,\n      h,\n      c,\n      u,\n      f,\n      w,\n      o,\n      d,\n      A,\n      M,\n      b\n    ] = e;\n    t.m11 = n, t.a = n, t.m21 = l, t.c = l, t.m31 = u, t.m41 = d, t.e = d, t.m12 = i, t.b = i, t.m22 = m, t.d = m, t.m32 = f, t.m42 = A, t.f = A, t.m13 = r, t.m23 = h, t.m33 = w, t.m43 = M, t.m14 = a, t.m24 = c, t.m34 = o, t.m44 = b;\n  } else if (e.length === 6) {\n    const [n, i, r, a, l, m] = e;\n    t.m11 = n, t.a = n, t.m12 = i, t.b = i, t.m21 = r, t.c = r, t.m22 = a, t.d = a, t.m41 = l, t.e = l, t.m42 = m, t.f = m;\n  }\n  return t;\n}, X = (s) => {\n  if (P(s))\n    return g([\n      s.m11,\n      s.m12,\n      s.m13,\n      s.m14,\n      s.m21,\n      s.m22,\n      s.m23,\n      s.m24,\n      s.m31,\n      s.m32,\n      s.m33,\n      s.m34,\n      s.m41,\n      s.m42,\n      s.m43,\n      s.m44\n    ]);\n  throw TypeError(\n    `CSSMatrix: \"${JSON.stringify(s)}\" is not a DOMMatrix / CSSMatrix / JSON compatible object.`\n  );\n}, O = (s) => {\n  if (typeof s != \"string\")\n    throw TypeError(`CSSMatrix: \"${JSON.stringify(s)}\" is not a string.`);\n  const t = String(s).replace(/\\s/g, \"\");\n  let e = new y();\n  const n = `CSSMatrix: invalid transform string \"${s}\"`;\n  return t.split(\")\").filter((i) => i).forEach((i) => {\n    const [r, a] = i.split(\"(\");\n    if (!a) throw TypeError(n);\n    const l = a.split(\",\").map(\n      (o) => o.includes(\"rad\") ? parseFloat(o) * (180 / Math.PI) : parseFloat(o)\n    ), [m, h, c, u] = l, f = [m, h, c], w = [m, h, c, u];\n    if (r === \"perspective\" && m && [h, c].every((o) => o === void 0))\n      e.m34 = -1 / m;\n    else if (r.includes(\"matrix\") && [6, 16].includes(l.length) && l.every((o) => !Number.isNaN(+o))) {\n      const o = l.map((d) => Math.abs(d) < 1e-6 ? 0 : d);\n      e = e.multiply(g(o));\n    } else if (r === \"translate3d\" && f.every((o) => !Number.isNaN(+o)))\n      e = e.translate(m, h, c);\n    else if (r === \"translate\" && m && c === void 0)\n      e = e.translate(m, h || 0, 0);\n    else if (r === \"rotate3d\" && w.every((o) => !Number.isNaN(+o)) && u)\n      e = e.rotateAxisAngle(m, h, c, u);\n    else if (r === \"rotate\" && m && [h, c].every((o) => o === void 0))\n      e = e.rotate(0, 0, m);\n    else if (r === \"scale3d\" && f.every((o) => !Number.isNaN(+o)) && f.some((o) => o !== 1))\n      e = e.scale(m, h, c);\n    else if (\n      // prop === \"scale\" && !Number.isNaN(x) && x !== 1 && z === undefined\n      // prop === \"scale\" && !Number.isNaN(x) && [x, y].some((n) => n !== 1) &&\n      r === \"scale\" && !Number.isNaN(m) && (m !== 1 || h !== 1) && c === void 0\n    ) {\n      const d = Number.isNaN(+h) ? m : h;\n      e = e.scale(m, d, 1);\n    } else if (r === \"skew\" && (m || !Number.isNaN(m) && h) && c === void 0)\n      e = e.skew(m, h || 0);\n    else if ([\"translate\", \"rotate\", \"scale\", \"skew\"].some(\n      (o) => r.includes(o)\n    ) && /[XYZ]/.test(r) && m && [h, c].every((o) => o === void 0))\n      if (r === \"skewX\" || r === \"skewY\")\n        e = e[r](m);\n      else {\n        const o = r.replace(/[XYZ]/, \"\"), d = r.replace(o, \"\"), A = [\"X\", \"Y\", \"Z\"].indexOf(d), M = o === \"scale\" ? 1 : 0, b = [\n          A === 0 ? m : M,\n          A === 1 ? m : M,\n          A === 2 ? m : M\n        ];\n        e = e[o](...b);\n      }\n    else\n      throw TypeError(n);\n  }), e;\n}, x = (s, t) => t ? [s.a, s.b, s.c, s.d, s.e, s.f] : [\n  s.m11,\n  s.m12,\n  s.m13,\n  s.m14,\n  s.m21,\n  s.m22,\n  s.m23,\n  s.m24,\n  s.m31,\n  s.m32,\n  s.m33,\n  s.m34,\n  s.m41,\n  s.m42,\n  s.m43,\n  s.m44\n], Y = (s, t, e) => {\n  const n = new y();\n  return n.m41 = s, n.e = s, n.m42 = t, n.f = t, n.m43 = e, n;\n}, F = (s, t, e) => {\n  const n = new y(), i = Math.PI / 180, r = s * i, a = t * i, l = e * i, m = Math.cos(r), h = -Math.sin(r), c = Math.cos(a), u = -Math.sin(a), f = Math.cos(l), w = -Math.sin(l), o = c * f, d = -c * w;\n  n.m11 = o, n.a = o, n.m12 = d, n.b = d, n.m13 = u;\n  const A = h * u * f + m * w;\n  n.m21 = A, n.c = A;\n  const M = m * f - h * u * w;\n  return n.m22 = M, n.d = M, n.m23 = -h * c, n.m31 = h * w - m * u * f, n.m32 = h * f + m * u * w, n.m33 = m * c, n;\n}, T = (s, t, e, n) => {\n  const i = new y(), r = Math.sqrt(s * s + t * t + e * e);\n  if (r === 0)\n    return i;\n  const a = s / r, l = t / r, m = e / r, h = n * (Math.PI / 360), c = Math.sin(h), u = Math.cos(h), f = c * c, w = a * a, o = l * l, d = m * m, A = 1 - 2 * (o + d) * f;\n  i.m11 = A, i.a = A;\n  const M = 2 * (a * l * f + m * c * u);\n  i.m12 = M, i.b = M, i.m13 = 2 * (a * m * f - l * c * u);\n  const b = 2 * (l * a * f - m * c * u);\n  i.m21 = b, i.c = b;\n  const k = 1 - 2 * (d + w) * f;\n  return i.m22 = k, i.d = k, i.m23 = 2 * (l * m * f + a * c * u), i.m31 = 2 * (m * a * f + l * c * u), i.m32 = 2 * (m * l * f - a * c * u), i.m33 = 1 - 2 * (w + o) * f, i;\n}, I = (s, t, e) => {\n  const n = new y();\n  return n.m11 = s, n.a = s, n.m22 = t, n.d = t, n.m33 = e, n;\n}, v = (s, t) => {\n  const e = new y();\n  if (s) {\n    const n = s * Math.PI / 180, i = Math.tan(n);\n    e.m21 = i, e.c = i;\n  }\n  if (t) {\n    const n = t * Math.PI / 180, i = Math.tan(n);\n    e.m12 = i, e.b = i;\n  }\n  return e;\n}, R = (s) => v(s, 0), D = (s) => v(0, s), N = (s, t) => {\n  const e = t.m11 * s.m11 + t.m12 * s.m21 + t.m13 * s.m31 + t.m14 * s.m41, n = t.m11 * s.m12 + t.m12 * s.m22 + t.m13 * s.m32 + t.m14 * s.m42, i = t.m11 * s.m13 + t.m12 * s.m23 + t.m13 * s.m33 + t.m14 * s.m43, r = t.m11 * s.m14 + t.m12 * s.m24 + t.m13 * s.m34 + t.m14 * s.m44, a = t.m21 * s.m11 + t.m22 * s.m21 + t.m23 * s.m31 + t.m24 * s.m41, l = t.m21 * s.m12 + t.m22 * s.m22 + t.m23 * s.m32 + t.m24 * s.m42, m = t.m21 * s.m13 + t.m22 * s.m23 + t.m23 * s.m33 + t.m24 * s.m43, h = t.m21 * s.m14 + t.m22 * s.m24 + t.m23 * s.m34 + t.m24 * s.m44, c = t.m31 * s.m11 + t.m32 * s.m21 + t.m33 * s.m31 + t.m34 * s.m41, u = t.m31 * s.m12 + t.m32 * s.m22 + t.m33 * s.m32 + t.m34 * s.m42, f = t.m31 * s.m13 + t.m32 * s.m23 + t.m33 * s.m33 + t.m34 * s.m43, w = t.m31 * s.m14 + t.m32 * s.m24 + t.m33 * s.m34 + t.m34 * s.m44, o = t.m41 * s.m11 + t.m42 * s.m21 + t.m43 * s.m31 + t.m44 * s.m41, d = t.m41 * s.m12 + t.m42 * s.m22 + t.m43 * s.m32 + t.m44 * s.m42, A = t.m41 * s.m13 + t.m42 * s.m23 + t.m43 * s.m33 + t.m44 * s.m43, M = t.m41 * s.m14 + t.m42 * s.m24 + t.m43 * s.m34 + t.m44 * s.m44;\n  return g([\n    e,\n    n,\n    i,\n    r,\n    a,\n    l,\n    m,\n    h,\n    c,\n    u,\n    f,\n    w,\n    o,\n    d,\n    A,\n    M\n  ]);\n};\nclass y {\n  /**\n   * @constructor\n   * @param init accepts all parameter configurations:\n   * * valid CSS transform string,\n   * * CSSMatrix/DOMMatrix instance,\n   * * a 6/16 elements *Array*.\n   */\n  constructor(t) {\n    return this.a = 1, this.b = 0, this.c = 0, this.d = 1, this.e = 0, this.f = 0, this.m11 = 1, this.m12 = 0, this.m13 = 0, this.m14 = 0, this.m21 = 0, this.m22 = 1, this.m23 = 0, this.m24 = 0, this.m31 = 0, this.m32 = 0, this.m33 = 1, this.m34 = 0, this.m41 = 0, this.m42 = 0, this.m43 = 0, this.m44 = 1, t ? this.setMatrixValue(t) : this;\n  }\n  /**\n   * A `Boolean` whose value is `true` if the matrix is the identity matrix. The identity\n   * matrix is one in which every value is 0 except those on the main diagonal from top-left\n   * to bottom-right corner (in other words, where the offsets in each direction are equal).\n   *\n   * @return the current property value\n   */\n  get isIdentity() {\n    return this.m11 === 1 && this.m12 === 0 && this.m13 === 0 && this.m14 === 0 && this.m21 === 0 && this.m22 === 1 && this.m23 === 0 && this.m24 === 0 && this.m31 === 0 && this.m32 === 0 && this.m33 === 1 && this.m34 === 0 && this.m41 === 0 && this.m42 === 0 && this.m43 === 0 && this.m44 === 1;\n  }\n  /**\n   * A `Boolean` flag whose value is `true` if the matrix was initialized as a 2D matrix\n   * and `false` if the matrix is 3D.\n   *\n   * @return the current property value\n   */\n  get is2D() {\n    return this.m31 === 0 && this.m32 === 0 && this.m33 === 1 && this.m34 === 0 && this.m43 === 0 && this.m44 === 1;\n  }\n  /**\n   * The `setMatrixValue` method replaces the existing matrix with one computed\n   * in the browser. EG: `matrix(1,0.25,-0.25,1,0,0)`\n   *\n   * The method accepts any *Array* values, the result of\n   * `DOMMatrix` instance method `toFloat64Array()` / `toFloat32Array()` calls\n   * or `CSSMatrix` instance method `toArray()`.\n   *\n   * This method expects valid *matrix()* / *matrix3d()* string values, as well\n   * as other transform functions like *translateX(10px)*.\n   *\n   * @param source\n   * @return the matrix instance\n   */\n  setMatrixValue(t) {\n    return typeof t == \"string\" && t.length && t !== \"none\" ? O(t) : Array.isArray(t) || t instanceof Float64Array || t instanceof Float32Array ? g(t) : typeof t == \"object\" ? X(t) : this;\n  }\n  /**\n   * Returns a *Float32Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param is2D *Array* representation of the matrix\n   * @return an *Array* representation of the matrix\n   */\n  toFloat32Array(t) {\n    return Float32Array.from(x(this, t));\n  }\n  /**\n   * Returns a *Float64Array* containing elements which comprise the matrix.\n   * The method can return either the 16 elements or the 6 elements\n   * depending on the value of the `is2D` parameter.\n   *\n   * @param is2D *Array* representation of the matrix\n   * @return an *Array* representation of the matrix\n   */\n  toFloat64Array(t) {\n    return Float64Array.from(x(this, t));\n  }\n  /**\n   * Creates and returns a string representation of the matrix in `CSS` matrix syntax,\n   * using the appropriate `CSS` matrix notation.\n   *\n   * matrix3d *matrix3d(m11, m12, m13, m14, m21, ...)*\n   * matrix *matrix(a, b, c, d, e, f)*\n   *\n   * @return a string representation of the matrix\n   */\n  toString() {\n    const { is2D: t } = this, e = this.toFloat64Array(t).join(\", \");\n    return `${t ? \"matrix\" : \"matrix3d\"}(${e})`;\n  }\n  /**\n   * Returns a JSON representation of the `CSSMatrix` instance, a standard *Object*\n   * that includes `{a,b,c,d,e,f}` and `{m11,m12,m13,..m44}` properties as well\n   * as the `is2D` & `isIdentity` properties.\n   *\n   * The result can also be used as a second parameter for the `fromMatrix` static method\n   * to load values into another matrix instance.\n   *\n   * @return an *Object* with all matrix values.\n   */\n  toJSON() {\n    const { is2D: t, isIdentity: e } = this;\n    return { ...this, is2D: t, isIdentity: e };\n  }\n  /**\n   * The Multiply method returns a new CSSMatrix which is the result of this\n   * matrix multiplied by the passed matrix, with the passed matrix to the right.\n   * This matrix is not modified.\n   *\n   * @param m2 CSSMatrix\n   * @return The resulted matrix.\n   */\n  multiply(t) {\n    return N(this, t);\n  }\n  /**\n   * The translate method returns a new matrix which is this matrix post\n   * multiplied by a translation matrix containing the passed values. If the z\n   * component is undefined, a 0 value is used in its place. This matrix is not\n   * modified.\n   *\n   * @param x X component of the translation value.\n   * @param y Y component of the translation value.\n   * @param z Z component of the translation value.\n   * @return The resulted matrix\n   */\n  translate(t, e, n) {\n    const i = t;\n    let r = e, a = n;\n    return typeof r > \"u\" && (r = 0), typeof a > \"u\" && (a = 0), N(this, Y(i, r, a));\n  }\n  /**\n   * The scale method returns a new matrix which is this matrix post multiplied by\n   * a scale matrix containing the passed values. If the z component is undefined,\n   * a 1 value is used in its place. If the y component is undefined, the x\n   * component value is used in its place. This matrix is not modified.\n   *\n   * @param x The X component of the scale value.\n   * @param y The Y component of the scale value.\n   * @param z The Z component of the scale value.\n   * @return The resulted matrix\n   */\n  scale(t, e, n) {\n    const i = t;\n    let r = e, a = n;\n    return typeof r > \"u\" && (r = t), typeof a > \"u\" && (a = 1), N(this, I(i, r, a));\n  }\n  /**\n   * The rotate method returns a new matrix which is this matrix post multiplied\n   * by each of 3 rotation matrices about the major axes, first X, then Y, then Z.\n   * If the y and z components are undefined, the x value is used to rotate the\n   * object about the z axis, as though the vector (0,0,x) were passed. All\n   * rotation values are in degrees. This matrix is not modified.\n   *\n   * @param rx The X component of the rotation, or Z if Y and Z are null.\n   * @param ry The (optional) Y component of the rotation value.\n   * @param rz The (optional) Z component of the rotation value.\n   * @return The resulted matrix\n   */\n  rotate(t, e, n) {\n    let i = t, r = e || 0, a = n || 0;\n    return typeof t == \"number\" && typeof e > \"u\" && typeof n > \"u\" && (a = i, i = 0, r = 0), N(this, F(i, r, a));\n  }\n  /**\n   * The rotateAxisAngle method returns a new matrix which is this matrix post\n   * multiplied by a rotation matrix with the given axis and `angle`. The right-hand\n   * rule is used to determine the direction of rotation. All rotation values are\n   * in degrees. This matrix is not modified.\n   *\n   * @param x The X component of the axis vector.\n   * @param y The Y component of the axis vector.\n   * @param z The Z component of the axis vector.\n   * @param angle The angle of rotation about the axis vector, in degrees.\n   * @return The resulted matrix\n   */\n  rotateAxisAngle(t, e, n, i) {\n    if ([t, e, n, i].some((r) => Number.isNaN(+r)))\n      throw new TypeError(\"CSSMatrix: expecting 4 values\");\n    return N(this, T(t, e, n, i));\n  }\n  /**\n   * Specifies a skew transformation along the `x-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param angle The angle amount in degrees to skew.\n   * @return The resulted matrix\n   */\n  skewX(t) {\n    return N(this, R(t));\n  }\n  /**\n   * Specifies a skew transformation along the `y-axis` by the given angle.\n   * This matrix is not modified.\n   *\n   * @param angle The angle amount in degrees to skew.\n   * @return The resulted matrix\n   */\n  skewY(t) {\n    return N(this, D(t));\n  }\n  /**\n   * Specifies a skew transformation along both the `x-axis` and `y-axis`.\n   * This matrix is not modified.\n   *\n   * @param angleX The X-angle amount in degrees to skew.\n   * @param angleY The angle amount in degrees to skew.\n   * @return The resulted matrix\n   */\n  skew(t, e) {\n    return N(this, v(t, e));\n  }\n  /**\n   * Transforms a specified vector using the matrix, returning a new\n   * {x,y,z,w} Tuple *Object* comprising the transformed vector.\n   * Neither the matrix nor the original vector are altered.\n   *\n   * The method is equivalent with `transformPoint()` method\n   * of the `DOMMatrix` constructor.\n   *\n   * @param t Tuple with `{x,y,z,w}` components\n   * @return the resulting Tuple\n   */\n  transformPoint(t) {\n    const e = this.m11 * t.x + this.m21 * t.y + this.m31 * t.z + this.m41 * t.w, n = this.m12 * t.x + this.m22 * t.y + this.m32 * t.z + this.m42 * t.w, i = this.m13 * t.x + this.m23 * t.y + this.m33 * t.z + this.m43 * t.w, r = this.m14 * t.x + this.m24 * t.y + this.m34 * t.z + this.m44 * t.w;\n    return t instanceof DOMPoint ? new DOMPoint(e, n, i, r) : {\n      x: e,\n      y: n,\n      z: i,\n      w: r\n    };\n  }\n}\np(y, \"Translate\", Y), p(y, \"Rotate\", F), p(y, \"RotateAxisAngle\", T), p(y, \"Scale\", I), p(y, \"SkewX\", R), p(y, \"SkewY\", D), p(y, \"Skew\", v), p(y, \"Multiply\", N), p(y, \"fromArray\", g), p(y, \"fromMatrix\", X), p(y, \"fromString\", O), p(y, \"toArray\", x), p(y, \"isCompatibleArray\", E), p(y, \"isCompatibleObject\", P);\nexport {\n  y as default\n};\n//# sourceMappingURL=dommatrix.mjs.map\n","import { Options } from \"../interface\";\n\n/** SVGPathCommander default options */\nconst defaultOptions: Options = {\n  origin: [0, 0, 0],\n  round: 4,\n};\n\nexport default defaultOptions;\n","/** Segment params length */\nconst paramsCount = {\n  a: 7,\n  c: 6,\n  h: 1,\n  l: 2,\n  m: 2,\n  r: 4,\n  q: 4,\n  s: 4,\n  t: 2,\n  v: 1,\n  z: 0,\n};\n\nexport default paramsCount;\n","import paramsCount from \"./paramsCount\";\nimport PathParser from \"./pathParser\";\nimport type { PathCommand, PathSegment, RelativeCommand } from \"../types\";\n\n/**\n * Breaks the parsing of a pathString once a segment is finalized.\n *\n * @param path the `PathParser` instance\n */\nconst finalizeSegment = (path: PathParser) => {\n  let pathCommand = path.pathValue[path.segmentStart] as PathCommand;\n  let relativeCommand = pathCommand.toLowerCase() as RelativeCommand;\n  const { data } = path;\n\n  while (data.length >= paramsCount[relativeCommand]) {\n    // overloaded `moveTo`\n    // https://github.com/rveciana/svg-path-properties/blob/master/src/parse.ts\n    if (relativeCommand === \"m\" && data.length > 2) {\n      path.segments.push(\n        [pathCommand as PathCommand | number].concat(\n          data.splice(0, 2) as number[],\n        ) as PathSegment,\n      );\n      relativeCommand = \"l\";\n      pathCommand = pathCommand === \"m\" ? \"l\" : \"L\";\n    } else {\n      path.segments.push(\n        [pathCommand as PathCommand | number].concat(\n          data.splice(0, paramsCount[relativeCommand]) as number[],\n        ) as PathSegment,\n      );\n    }\n\n    if (!paramsCount[relativeCommand]) {\n      break;\n    }\n  }\n};\nexport default finalizeSegment;\n","const error = \"SVGPathCommander Error\";\nexport default error;\n","import error from \"./error\";\nimport type PathParser from \"./pathParser\";\n\n/**\n * Validates an A (arc-to) specific path command value.\n * Usually a `large-arc-flag` or `sweep-flag`.\n *\n * @param path the `PathParser` instance\n */\nconst scanFlag = (path: PathParser) => {\n  const { index, pathValue } = path;\n  const code = pathValue.charCodeAt(index);\n\n  if (code === 0x30 /* 0 */) {\n    path.param = 0;\n    path.index += 1;\n    return;\n  }\n\n  if (code === 0x31 /* 1 */) {\n    path.param = 1;\n    path.index += 1;\n    return;\n  }\n\n  path.err = `${error}: invalid Arc flag \"${\n    pathValue[index]\n  }\", expecting 0 or 1 at index ${index}`;\n};\n\nexport default scanFlag;\n","import { DigitNumber } from \"../types\";\n\n/**\n * Checks if a character is a digit.\n *\n * @param code the character to check\n * @returns check result\n */\nconst isDigit = (code: number): code is DigitNumber => {\n  return code >= 48 && code <= 57; // 0..9\n};\nexport default isDigit;\n","const invalidPathValue = \"Invalid path value\";\nexport default invalidPathValue;\n","import isDigit from \"./isDigit\";\nimport invalidPathValue from \"./invalidPathValue\";\nimport error from \"./error\";\nimport type PathParser from \"./pathParser\";\n\n/**\n * Validates every character of the path string,\n * every path command, negative numbers or floating point numbers.\n *\n * @param path the `PathParser` instance\n */\nconst scanParam = (path: PathParser) => {\n  const { max, pathValue, index: start } = path;\n  let index = start;\n  let zeroFirst = false;\n  let hasCeiling = false;\n  let hasDecimal = false;\n  let hasDot = false;\n  let ch;\n\n  if (index >= max) {\n    path.err =\n      `${error}: ${invalidPathValue} at index ${index}, \"pathValue\" is missing param`;\n    return;\n  }\n  ch = pathValue.charCodeAt(index);\n\n  if (ch === 0x2b /* + */ || ch === 0x2d /* - */) {\n    index += 1;\n    // ch = (index < max) ? pathValue.charCodeAt(index) : 0;\n    ch = pathValue.charCodeAt(index);\n  }\n\n  // This logic is shamelessly borrowed from Esprima\n  // https://github.com/ariya/esprimas\n  if (!isDigit(ch) && ch !== 0x2e /* . */) {\n    // path.err = 'SvgPath: param should start with 0..9 or `.` (at pos ' + index + ')';\n    path.err = `${error}: ${invalidPathValue} at index ${index}, \"${\n      pathValue[index]\n    }\" is not a number`;\n    return;\n  }\n\n  if (ch !== 0x2e /* . */) {\n    zeroFirst = ch === 0x30 /* 0 */;\n    index += 1;\n\n    ch = pathValue.charCodeAt(index);\n\n    if (zeroFirst && index < max) {\n      // decimal number starts with '0' such as '09' is illegal.\n      if (ch && isDigit(ch)) {\n        // path.err = 'SvgPath: numbers started with `0` such as `09`\n        // are illegal (at pos ' + start + ')';\n        path.err = `${error}: ${invalidPathValue} at index ${start}, \"${\n          pathValue[start]\n        }\" illegal number`;\n        return;\n      }\n    }\n\n    while (index < max && isDigit(pathValue.charCodeAt(index))) {\n      index += 1;\n      hasCeiling = true;\n    }\n\n    ch = pathValue.charCodeAt(index);\n  }\n\n  if (ch === 0x2e /* . */) {\n    hasDot = true;\n    index += 1;\n    while (isDigit(pathValue.charCodeAt(index))) {\n      index += 1;\n      hasDecimal = true;\n    }\n\n    ch = pathValue.charCodeAt(index);\n  }\n\n  if (ch === 0x65 /* e */ || ch === 0x45 /* E */) {\n    if (hasDot && !hasCeiling && !hasDecimal) {\n      path.err = `${error}: ${invalidPathValue} at index ${index}, \"${\n        pathValue[index]\n      }\" invalid float exponent`;\n      return;\n    }\n\n    index += 1;\n\n    ch = pathValue.charCodeAt(index);\n\n    if (ch === 0x2b /* + */ || ch === 0x2d /* - */) {\n      index += 1;\n    }\n    if (index < max && isDigit(pathValue.charCodeAt(index))) {\n      while (index < max && isDigit(pathValue.charCodeAt(index))) {\n        index += 1;\n      }\n    } else {\n      path.err = `${error}: ${invalidPathValue} at index ${index}, \"${\n        pathValue[index]\n      }\" invalid integer exponent`;\n      return;\n    }\n  }\n\n  path.index = index;\n  path.param = +path.pathValue.slice(start, index);\n};\nexport default scanParam;\n","import type { SpaceNumber } from \"../types\";\n\n/**\n * Checks if the character is a space.\n *\n * @param ch the character to check\n * @returns check result\n */\n\nconst isSpace = (ch: number): ch is SpaceNumber => {\n  const allSpaces = [\n    // Special spaces\n    0x1680,\n    0x180e,\n    0x2000,\n    0x2001,\n    0x2002,\n    0x2003,\n    0x2004,\n    0x2005,\n    0x2006,\n    0x2007,\n    0x2008,\n    0x2009,\n    0x200a,\n    0x202f,\n    0x205f,\n    0x3000,\n    0xfeff,\n    // Line terminators\n    0x0a,\n    0x0d,\n    0x2028,\n    0x2029,\n    // White spaces\n    0x20,\n    0x09,\n    0x0b,\n    0x0c,\n    0xa0,\n  ];\n\n  return allSpaces.includes(ch);\n};\nexport default isSpace;\n","import isSpace from \"./isSpace\";\nimport type PathParser from \"./pathParser\";\n\n/**\n * Points the parser to the next character in the\n * path string every time it encounters any kind of\n * space character.\n *\n * @param path the `PathParser` instance\n */\nconst skipSpaces = (path: PathParser) => {\n  const { pathValue, max } = path;\n  while (path.index < max && isSpace(pathValue.charCodeAt(path.index))) {\n    path.index += 1;\n  }\n};\nexport default skipSpaces;\n","import type { PathCommandNumber } from \"../types\";\n\n/**\n * Checks if the character is a path command.\n *\n * @param code the character to check\n * @returns check result\n */\nconst isPathCommand = (code: number): code is PathCommandNumber => {\n  // eslint-disable-next-line no-bitwise -- Impossible to satisfy\n  switch (code | 0x20) {\n    case 0x6d /* m */:\n    case 0x7a /* z */:\n    case 0x6c /* l */:\n    case 0x68 /* h */:\n    case 0x76 /* v */:\n    case 0x63 /* c */:\n    case 0x73 /* s */:\n    case 0x71 /* q */:\n    case 0x74 /* t */:\n    case 0x61 /* a */:\n      // case 0x72/* r */:\n      return true;\n    default:\n      return false;\n  }\n};\nexport default isPathCommand;\n","import isDigit from \"./isDigit\";\nimport type { DigitNumber } from \"../types\";\n\n/**\n * Checks if the character is or belongs to a number.\n * [0-9]|+|-|.\n *\n * @param code the character to check\n * @returns check result\n */\nconst isDigitStart = (\n  code: number,\n): code is DigitNumber | 0x2b | 0x2d | 0x2e => {\n  return isDigit(code) /* 0..9 */ || code === 0x2b /* + */ ||\n    code === 0x2d /* - */ || code === 0x2e; /* . */\n};\nexport default isDigitStart;\n","/**\n * Checks if the character is an A (arc-to) path command.\n *\n * @param code the character to check\n * @returns check result\n */\nconst isArcCommand = (code: number): code is 0x61 => {\n  // eslint-disable-next-line no-bitwise -- Impossible to satisfy\n  return (code | 0x20) === 0x61;\n};\nexport default isArcCommand;\n","/**\n * Checks if the character is a MoveTo command.\n *\n * @param code the character to check\n * @returns check result\n */\nconst isMoveCommand = (code: number): code is 0x6d | 0x4d => {\n  // eslint-disable-next-line no-bitwise -- Impossible to satisfy\n  switch (code | 0x20) {\n    case 0x6d /* m */:\n    case 0x4d /* M */:\n      return true;\n    default:\n      return false;\n  }\n};\nexport default isMoveCommand;\n","import finalizeSegment from \"./finalizeSegment\";\nimport paramCounts from \"./paramsCount\";\nimport scanFlag from \"./scanFlag\";\nimport scanParam from \"./scanParam\";\nimport skipSpaces from \"./skipSpaces\";\nimport isPathCommand from \"./isPathCommand\";\nimport isDigitStart from \"./isDigitStart\";\nimport isArcCommand from \"./isArcCommand\";\nimport isMoveCommand from \"./isMoveCommand\";\nimport invalidPathValue from \"./invalidPathValue\";\nimport error from \"./error\";\n\nimport type PathParser from \"./pathParser\";\nimport type { PathSegment, RelativeCommand } from \"../types\";\n\n/**\n * Scans every character in the path string to determine\n * where a segment starts and where it ends.\n *\n * @param path the `PathParser` instance\n */\nconst scanSegment = (path: PathParser) => {\n  const { max, pathValue, index, segments } = path;\n  const cmdCode = pathValue.charCodeAt(index);\n  const reqParams =\n    paramCounts[pathValue[index].toLowerCase() as RelativeCommand];\n\n  path.segmentStart = index;\n\n  // segments always start with a path command\n  if (!isPathCommand(cmdCode)) {\n    path.err = `${error}: ${invalidPathValue} \"${\n      pathValue[index]\n    }\" is not a path command at index ${index}`;\n    return;\n  }\n\n  // after a Z segment, we only expect a MoveTo path command\n  const lastSegment = segments[segments.length - 1] as PathSegment | undefined;\n  if (\n    !isMoveCommand(cmdCode) && lastSegment?.[0]?.toLocaleLowerCase() === \"z\"\n  ) {\n    path.err = `${error}: ${invalidPathValue} \"${\n      pathValue[index]\n    }\" is not a MoveTo path command at index ${index}`;\n    return;\n  }\n\n  path.index += 1;\n  skipSpaces(path);\n\n  path.data = [];\n\n  if (!reqParams) {\n    // Z\n    finalizeSegment(path);\n    return;\n  }\n\n  for (;;) {\n    for (let i = reqParams; i > 0; i -= 1) {\n      if (isArcCommand(cmdCode) && (i === 3 || i === 4)) scanFlag(path);\n      else scanParam(path);\n\n      if (path.err.length) {\n        return;\n      }\n      path.data.push(path.param);\n\n      skipSpaces(path);\n\n      // after ',' param is mandatory\n      if (\n        path.index < max && pathValue.charCodeAt(path.index) === 0x2c /* , */\n      ) {\n        path.index += 1;\n        skipSpaces(path);\n      }\n    }\n\n    if (path.index >= path.max) {\n      break;\n    }\n\n    // Stop on next segment\n    if (!isDigitStart(pathValue.charCodeAt(path.index))) {\n      break;\n    }\n  }\n\n  finalizeSegment(path);\n};\nexport default scanSegment;\n","import type { PathArray, PathSegment } from \"../types\";\n\n/**\n * The `PathParser` is used by the `parsePathString` static method\n * to generate a `pathArray`.\n *\n * @param pathString\n */\nexport default class PathParser {\n  declare segments: PathArray | PathSegment[];\n  declare pathValue: string;\n  declare max: number;\n  declare index: number;\n  declare param: number;\n  declare segmentStart: number;\n  declare data: (string | number)[];\n  declare err: string;\n\n  constructor(pathString: string) {\n    this.segments = [];\n    this.pathValue = pathString;\n    this.max = pathString.length;\n    this.index = 0;\n    this.param = 0.0;\n    this.segmentStart = 0;\n    this.data = [];\n    this.err = \"\";\n  }\n}\n","import scanSegment from \"./scanSegment\";\nimport skipSpaces from \"./skipSpaces\";\nimport PathParser from \"./pathParser\";\nimport type { PathArray } from \"../types\";\n\n/**\n * Parses a path string value and returns an array\n * of segments we like to call `pathArray`.\n *\n * @param pathInput the string to be parsed\n * @returns the resulted `pathArray` or error string\n */\nconst parsePathString = <T extends PathArray>(pathInput: string | T) => {\n  if (typeof pathInput !== \"string\") {\n    return pathInput.slice(0) as typeof pathInput;\n  }\n\n  const path = new PathParser(pathInput);\n\n  skipSpaces(path);\n\n  while (path.index < path.max && !path.err.length) {\n    scanSegment(path);\n  }\n\n  if (path?.err.length) {\n    throw TypeError(path.err);\n  }\n\n  /**\n   * force absolute first M\n   * getPathBBox calculation requires first segment to be absolute\n   */\n  path.segments[0][0] = \"M\";\n  return path.segments as PathArray;\n};\n\nexport default parsePathString;\n","import type {\n  AbsoluteCommand,\n  AbsoluteSegment,\n  ASegment,\n  CSegment,\n  HSegment,\n  LSegment,\n  MSegment,\n  PathSegment,\n  QSegment,\n  SSegment,\n  TSegment,\n  VSegment,\n} from \"../types\";\n\n/**\n * Returns an absolute segment of a `PathArray` object.\n *\n * @param segment the segment object\n * @param index the segment index\n * @param lastX the last known X value\n * @param lastY the last known Y value\n * @returns the absolute segment\n */\nconst absolutizeSegment = (\n  segment: PathSegment,\n  index: number,\n  lastX: number,\n  lastY: number,\n) => {\n  const [pathCommand] = segment;\n  const absCommand = pathCommand.toUpperCase() as AbsoluteCommand;\n  const isAbsolute = absCommand === pathCommand;\n\n  /* istanbul ignore else @preserve */\n  if (index === 0 || isAbsolute) return segment as MSegment | AbsoluteSegment;\n  // const values = segment.slice(1) as number[];\n  if (absCommand === \"A\") {\n    return [\n      absCommand,\n      segment[1],\n      segment[2],\n      segment[3],\n      segment[4],\n      segment[5],\n      (segment as ASegment)[6] + lastX,\n      (segment as ASegment)[7] + lastY,\n    ] as ASegment;\n  } else if (absCommand === \"V\") {\n    return [absCommand, (segment as VSegment)[1] + lastY] as VSegment;\n  } else if (absCommand === \"H\") {\n    return [absCommand, (segment as HSegment)[1] + lastX] as HSegment;\n  } else if (absCommand === \"L\") {\n    return [\n      absCommand,\n      (segment as LSegment)[1] + lastX,\n      (segment as LSegment)[2] + lastY,\n    ] as LSegment;\n  } else {\n    // use brakets for `eslint: no-case-declaration`\n    // https://stackoverflow.com/a/50753272/803358\n    const absValues = [] as number[];\n    const seglen = segment.length;\n    for (let j = 1; j < seglen; j += 1) {\n      absValues.push((segment[j] as number) + (j % 2 ? lastX : lastY));\n    }\n    // for c, s, q, t\n    return [absCommand as typeof absCommand | number].concat(absValues) as\n      | MSegment\n      | QSegment\n      | TSegment\n      | SSegment\n      | CSegment;\n  }\n};\nexport default absolutizeSegment;\n","// import paramsParser from '../parser/paramsParser';\nimport type {\n  AbsoluteCommand,\n  IteratorCallback,\n  PathArray,\n  PathCommand,\n  PathSegment,\n} from \"../types\";\n\nconst iterate = <T extends PathArray>(\n  path: PathArray,\n  iterator: IteratorCallback,\n) => {\n  let pathLen = path.length;\n  let segment: PathSegment;\n  let pathCommand = \"M\" as PathCommand;\n  let absCommand = \"M\" as AbsoluteCommand;\n  let isRelative = false;\n  let x = 0;\n  let y = 0;\n  let mx = 0;\n  let my = 0;\n  let segLen = 0;\n\n  for (let i = 0; i < pathLen; i += 1) {\n    segment = path[i];\n    [pathCommand] = segment;\n    segLen = segment.length;\n    absCommand = pathCommand.toUpperCase() as AbsoluteCommand;\n    isRelative = absCommand !== pathCommand;\n\n    const iteratorResult = iterator(segment, i, x, y);\n    // some methods like getPointAtLength would like to break\n    // when task is complete\n    if (iteratorResult === false) {\n      break;\n    }\n\n    // segment = path[i];\n    if (absCommand === \"Z\") {\n      x = mx;\n      y = my;\n    } else if (absCommand === \"H\") {\n      x = (segment[1] as number) + (isRelative ? x : 0);\n    } else if (absCommand === \"V\") {\n      y = (segment[1] as number) + (isRelative ? y : 0);\n    } else {\n      x = (segment[segLen - 2] as number) + (isRelative ? x : 0);\n      y = (segment[segLen - 1] as number) + (isRelative ? y : 0);\n\n      if (absCommand === \"M\") {\n        mx = x;\n        my = y;\n      }\n    }\n\n    if (iteratorResult) {\n      path[i] = iteratorResult;\n      if (iteratorResult[0] === \"C\") {\n        pathLen = path.length;\n      }\n    }\n  }\n  return path as T;\n};\n\nexport default iterate;\n","import parsePathString from \"../parser/parsePathString\";\nimport absolutizeSegment from \"../process/absolutizeSegment\";\nimport type { AbsoluteArray, PathArray } from \"../types\";\nimport iterate from \"../process/iterate\";\n\n/**\n * Parses a path string value or object and returns an array\n * of segments, all converted to absolute values.\n *\n * @param pathInput the path string | object\n * @returns the resulted `pathArray` with absolute values\n */\nconst pathToAbsolute = (pathInput: string | PathArray) => {\n  const path = parsePathString(pathInput);\n\n  return iterate<AbsoluteArray>(path, absolutizeSegment);\n};\nexport default pathToAbsolute;\n","import type {\n  aSegment,\n  cSegment,\n  hSegment,\n  lSegment,\n  MSegment,\n  PathSegment,\n  qSegment,\n  RelativeCommand,\n  RelativeSegment,\n  sSegment,\n  tSegment,\n  vSegment,\n} from \"../types\";\n\n/**\n * Returns a relative segment of a `PathArray` object.\n *\n * @param segment the segment object\n * @param index the segment index\n * @param lastX the last known X value\n * @param lastY the last known Y value\n * @returns the relative segment\n */\nconst relativizeSegment = (\n  segment: PathSegment,\n  index: number,\n  lastX: number,\n  lastY: number,\n) => {\n  const [pathCommand] = segment;\n  const relCommand = pathCommand.toLowerCase() as RelativeCommand;\n  const isRelative = pathCommand === relCommand;\n\n  /* istanbul ignore else @preserve */\n  if (index === 0 || isRelative) return segment as MSegment | RelativeSegment;\n\n  if (relCommand === \"a\") {\n    return [\n      relCommand,\n      segment[1],\n      segment[2],\n      segment[3],\n      segment[4],\n      segment[5],\n      (segment as aSegment)[6] - lastX,\n      (segment as aSegment)[7] - lastY,\n    ] as aSegment;\n  } else if (relCommand === \"v\") {\n    return [relCommand, (segment as vSegment)[1] - lastY] as vSegment;\n  } else if (relCommand === \"h\") {\n    return [relCommand, (segment as hSegment)[1] - lastX] as hSegment;\n  } else if (relCommand === \"l\") {\n    return [\n      relCommand,\n      (segment as lSegment)[1] - lastX,\n      (segment as lSegment)[2] - lastY,\n    ] as lSegment;\n  } else {\n    // use brakets for `eslint: no-case-declaration`\n    // https://stackoverflow.com/a/50753272/803358\n    const relValues = [] as number[];\n    const seglen = segment.length;\n    for (let j = 1; j < seglen; j += 1) {\n      relValues.push((segment[j] as number) - (j % 2 ? lastX : lastY));\n    }\n    // for c, s, q, t\n    return [relCommand as RelativeCommand | number].concat(relValues) as\n      | qSegment\n      | tSegment\n      | sSegment\n      | cSegment;\n  }\n};\n\nexport default relativizeSegment;\n","import type { PathArray, RelativeArray } from \"../types\";\nimport parsePathString from \"../parser/parsePathString\";\nimport iterate from \"../process/iterate\";\nimport relativizeSegment from \"../process/relativizeSegment\";\n\n/**\n * Parses a path string value or object and returns an array\n * of segments, all converted to relative values.\n *\n * @param pathInput the path string | object\n * @returns the resulted `pathArray` with relative values\n */\nconst pathToRelative = (pathInput: string | PathArray): RelativeArray => {\n  const path = parsePathString(pathInput);\n\n  return iterate<RelativeArray>(path, relativizeSegment);\n};\nexport default pathToRelative;\n","/**\n * Returns an {x,y} vector rotated by a given\n * angle in radian.\n *\n * @param x the initial vector x\n * @param y the initial vector y\n * @param rad the radian vector angle\n * @returns the rotated vector\n */\nconst rotateVector = (\n  x: number,\n  y: number,\n  rad: number,\n): { x: number; y: number } => {\n  const { sin, cos } = Math;\n  const X = x * cos(rad) - y * sin(rad);\n  const Y = x * sin(rad) + y * cos(rad);\n  return { x: X, y: Y };\n};\n\nexport default rotateVector;\n","import rotateVector from \"../math/rotateVector\";\n\n/**\n * Converts A (arc-to) segments to C (cubic-bezier-to).\n *\n * For more information of where this math came from visit:\n * http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n *\n * @param X1 the starting x position\n * @param Y1 the starting y position\n * @param RX x-radius of the arc\n * @param RY y-radius of the arc\n * @param angle x-axis-rotation of the arc\n * @param LAF large-arc-flag of the arc\n * @param SF sweep-flag of the arc\n * @param X2 the ending x position\n * @param Y2 the ending y position\n * @param recursive the parameters needed to split arc into 2 segments\n * @return the resulting cubic-bezier segment(s)\n */\nconst arcToCubic = (\n  X1: number,\n  Y1: number,\n  RX: number,\n  RY: number,\n  angle: number,\n  LAF: number,\n  SF: number,\n  X2: number,\n  Y2: number,\n  recursive?: [number, number, number, number],\n): number[] => {\n  let x1 = X1;\n  let y1 = Y1;\n  let rx = RX;\n  let ry = RY;\n  let x2 = X2;\n  let y2 = Y2;\n  // for more information of where this Math came from visit:\n  // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes\n  const d120 = (Math.PI * 120) / 180;\n\n  const rad = (Math.PI / 180) * (+angle || 0);\n  let res = [] as number[];\n  let xy;\n  let f1;\n  let f2;\n  let cx;\n  let cy;\n\n  if (!recursive) {\n    xy = rotateVector(x1, y1, -rad);\n    x1 = xy.x;\n    y1 = xy.y;\n    xy = rotateVector(x2, y2, -rad);\n    x2 = xy.x;\n    y2 = xy.y;\n\n    const x = (x1 - x2) / 2;\n    const y = (y1 - y2) / 2;\n    let h = (x * x) / (rx * rx) + (y * y) / (ry * ry);\n    if (h > 1) {\n      h = Math.sqrt(h);\n      rx *= h;\n      ry *= h;\n    }\n    const rx2 = rx * rx;\n    const ry2 = ry * ry;\n\n    const k = (LAF === SF ? -1 : 1) *\n      Math.sqrt(\n        Math.abs(\n          (rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x),\n        ),\n      );\n\n    cx = (k * rx * y) / ry + (x1 + x2) / 2;\n    cy = (k * -ry * x) / rx + (y1 + y2) / 2;\n    // eslint-disable-next-line no-bitwise -- Impossible to satisfy no-bitwise\n    f1 = Math.asin(((((y1 - cy) / ry) * 10 ** 9) >> 0) / 10 ** 9);\n    // eslint-disable-next-line no-bitwise -- Impossible to satisfy no-bitwise\n    f2 = Math.asin(((((y2 - cy) / ry) * 10 ** 9) >> 0) / 10 ** 9);\n\n    f1 = x1 < cx ? Math.PI - f1 : f1;\n    f2 = x2 < cx ? Math.PI - f2 : f2;\n    if (f1 < 0) f1 = Math.PI * 2 + f1;\n    if (f2 < 0) f2 = Math.PI * 2 + f2;\n    if (SF && f1 > f2) {\n      f1 -= Math.PI * 2;\n    }\n    if (!SF && f2 > f1) {\n      f2 -= Math.PI * 2;\n    }\n  } else {\n    [f1, f2, cx, cy] = recursive;\n  }\n  let df = f2 - f1;\n  if (Math.abs(df) > d120) {\n    const f2old = f2;\n    const x2old = x2;\n    const y2old = y2;\n    f2 = f1 + d120 * (SF && f2 > f1 ? 1 : -1);\n    x2 = cx + rx * Math.cos(f2);\n    y2 = cy + ry * Math.sin(f2);\n    res = arcToCubic(x2, y2, rx, ry, angle, 0, SF, x2old, y2old, [\n      f2,\n      f2old,\n      cx,\n      cy,\n    ]);\n  }\n  df = f2 - f1;\n  const c1 = Math.cos(f1);\n  const s1 = Math.sin(f1);\n  const c2 = Math.cos(f2);\n  const s2 = Math.sin(f2);\n  const t = Math.tan(df / 4);\n  const hx = (4 / 3) * rx * t;\n  const hy = (4 / 3) * ry * t;\n  const m1 = [x1, y1];\n  const m2 = [x1 + hx * s1, y1 - hy * c1];\n  const m3 = [x2 + hx * s2, y2 - hy * c2];\n  const m4 = [x2, y2];\n  m2[0] = 2 * m1[0] - m2[0];\n  m2[1] = 2 * m1[1] - m2[1];\n  if (recursive) {\n    return [m2[0], m2[1], m3[0], m3[1], m4[0], m4[1]].concat(res);\n  }\n  res = [m2[0], m2[1], m3[0], m3[1], m4[0], m4[1]].concat(res);\n  const newres = [];\n  for (let i = 0, ii = res.length; i < ii; i += 1) {\n    newres[i] = i % 2\n      ? rotateVector(res[i - 1], res[i], rad).y\n      : rotateVector(res[i], res[i + 1], rad).x;\n  }\n  return newres;\n};\nexport default arcToCubic;\n","/**\n * Converts a Q (quadratic-bezier) segment to C (cubic-bezier).\n *\n * @param x1 curve start x\n * @param y1 curve start y\n * @param qx control point x\n * @param qy control point y\n * @param x2 curve end x\n * @param y2 curve end y\n * @returns the cubic-bezier segment\n */\nconst quadToCubic = (\n  x1: number,\n  y1: number,\n  qx: number,\n  qy: number,\n  x2: number,\n  y2: number,\n): [number, number, number, number, number, number] => {\n  const r13 = 1 / 3;\n  const r23 = 2 / 3;\n  return [\n    r13 * x1 + r23 * qx, // cpx1\n    r13 * y1 + r23 * qy, // cpy1\n    r13 * x2 + r23 * qx, // cpx2\n    r13 * y2 + r23 * qy, // cpy2\n    x2,\n    y2, // x,y\n  ];\n};\nexport default quadToCubic;\n","import { PointTuple } from \"../types\";\n\n/**\n * Returns the coordinates of a specified distance\n * ratio between two points.\n *\n * @param a the first point coordinates\n * @param b the second point coordinates\n * @param t the ratio\n * @returns the midpoint coordinates\n */\nconst midPoint = (a: PointTuple, b: PointTuple, t: number): PointTuple => {\n  const [ax, ay] = a;\n  const [bx, by] = b;\n  return [ax + (bx - ax) * t, ay + (by - ay) * t];\n};\n\nexport default midPoint;\n","import midPoint from \"../math/midPoint\";\n\n/**\n * Converts an L (line-to) segment to C (cubic-bezier).\n *\n * @param x1 line start x\n * @param y1 line start y\n * @param x2 line end x\n * @param y2 line end y\n * @returns the cubic-bezier segment\n */\nconst lineToCubic = (x1: number, y1: number, x2: number, y2: number) => {\n  const c1 = midPoint([x1, y1], [x2, y2], 1.0 / 3.0);\n  const c2 = midPoint([x1, y1], [x2, y2], 2.0 / 3.0);\n  return [c1[0], c1[1], c2[0], c2[1], x2, y2];\n};\nexport default lineToCubic;\n","import arcToCubic from \"./arcToCubic\";\nimport quadToCubic from \"./quadToCubic\";\nimport lineToCubic from \"./lineToCubic\";\nimport type { CSegment, MSegment, PathSegment } from \"../types\";\nimport type { ParserParams } from \"../interface\";\n\n/**\n * Converts any segment to C (cubic-bezier).\n *\n * @param segment the source segment\n * @param params the source segment parameters\n * @returns the cubic-bezier segment\n */\nconst segmentToCubic = (segment: PathSegment, params: ParserParams) => {\n  const [pathCommand] = segment;\n  const values = segment.slice(1).map(Number);\n  const [x, y] = values;\n  // let args;\n  const { x1: px1, y1: py1, x: px, y: py } = params;\n\n  if (!\"TQ\".includes(pathCommand)) {\n    params.qx = null;\n    params.qy = null;\n  }\n\n  if (pathCommand === \"M\") {\n    params.x = x;\n    params.y = y;\n    return segment;\n  } else if (pathCommand === \"A\") {\n    return [\"C\" as string | number].concat(\n      arcToCubic(\n        px1,\n        py1,\n        values[0],\n        values[1],\n        values[2],\n        values[3],\n        values[4],\n        values[5],\n        values[6],\n      ),\n    ) as CSegment;\n  } else if (pathCommand === \"Q\") {\n    params.qx = x;\n    params.qy = y;\n    return [\"C\" as string | number].concat(\n      quadToCubic(px1, py1, values[0], values[1], values[2], values[3]),\n    ) as CSegment;\n  } else if (pathCommand === \"L\") {\n    return [\"C\" as string | number].concat(\n      lineToCubic(px1, py1, x, y),\n    ) as CSegment;\n  } else if (pathCommand === \"Z\") {\n    return [\"C\" as string | number].concat(\n      lineToCubic(px1, py1, px, py),\n    ) as CSegment;\n  }\n\n  return segment as MSegment | CSegment;\n};\nexport default segmentToCubic;\n","import type { ParserParams } from \"../interface\";\nimport type {\n  ASegment,\n  CSegment,\n  HSegment,\n  LSegment,\n  MSegment,\n  NormalSegment,\n  PathCommand,\n  PathSegment,\n  PointTuple,\n  QSegment,\n  VSegment,\n} from \"../types\";\n\n/**\n * Normalizes a single segment of a `pathArray` object.\n *\n * @param segment the segment object\n * @param params the normalization parameters\n * @returns the normalized segment\n */\nconst normalizeSegment = (segment: PathSegment, params: ParserParams) => {\n  const [pathCommand] = segment;\n  const absCommand = pathCommand.toUpperCase();\n  const isRelative = pathCommand !== absCommand;\n  const { x1: px1, y1: py1, x2: px2, y2: py2, x, y } = params;\n  const values = segment.slice(1) as number[];\n  let absValues = values.map((n, j) => n + (isRelative ? (j % 2 ? y : x) : 0));\n\n  if (!\"TQ\".includes(absCommand)) {\n    // optional but good to be cautious\n    params.qx = null;\n    params.qy = null;\n  }\n\n  // istanbul ignore else @preserve\n  if (absCommand === \"A\") {\n    absValues = values.slice(0, -2).concat(\n      values[5] + (isRelative ? x : 0),\n      values[6] + (isRelative ? y : 0),\n    );\n\n    return [\"A\" as PathCommand | number].concat(absValues) as ASegment;\n  } else if (absCommand === \"H\") {\n    return [\n      \"L\",\n      (segment as HSegment)[1] + (isRelative ? x : 0),\n      py1,\n    ] as LSegment;\n  } else if (absCommand === \"V\") {\n    return [\n      \"L\",\n      px1,\n      (segment as VSegment)[1] + (isRelative ? y : 0),\n    ] as LSegment;\n  } else if (absCommand === \"L\") {\n    return [\n      \"L\",\n      (segment as LSegment)[1] + (isRelative ? x : 0),\n      (segment as LSegment)[2] + (isRelative ? y : 0),\n    ] as LSegment;\n  } else if (absCommand === \"M\") {\n    return [\n      \"M\",\n      (segment as MSegment)[1] + (isRelative ? x : 0),\n      (segment as MSegment)[2] + (isRelative ? y : 0),\n    ] as MSegment;\n  } else if (absCommand === \"C\") {\n    return [\"C\" as PathCommand | number].concat(absValues) as CSegment;\n  } else if (absCommand === \"S\") {\n    const x1 = px1 * 2 - px2;\n    const y1 = py1 * 2 - py2;\n    params.x1 = x1;\n    params.y1 = y1;\n    return [\"C\", x1, y1].concat(absValues) as CSegment;\n  } else if (absCommand === \"T\") {\n    const qx = px1 * 2 - (params.qx ? params.qx : /* istanbul ignore next */ 0);\n    const qy = py1 * 2 - (params.qy ? params.qy : /* istanbul ignore next */ 0);\n    params.qx = qx;\n    params.qy = qy;\n    return [\"Q\", qx, qy].concat(absValues) as QSegment;\n  } else if (absCommand === \"Q\") {\n    const [nqx, nqy] = absValues as PointTuple;\n    params.qx = nqx;\n    params.qy = nqy;\n    return [\"Q\" as PathCommand | number].concat(absValues) as QSegment;\n  } else if (absCommand === \"Z\") {\n    return [\"Z\"] as NormalSegment;\n  }\n\n  // istanbul ignore next @preserve\n  return segment as NormalSegment;\n};\nexport default normalizeSegment;\n","import type { ParserParams } from \"../interface\";\n\nconst paramsParser: ParserParams = {\n  x1: 0,\n  y1: 0,\n  x2: 0,\n  y2: 0,\n  x: 0,\n  y: 0,\n  qx: null,\n  qy: null,\n};\n\nexport default paramsParser;\n","import segmentToCubic from \"../process/segmentToCubic\";\nimport { AbsoluteCommand, CSegment, CurveArray, PathArray } from \"../types\";\nimport iterate from \"../process/iterate\";\nimport parsePathString from \"../parser/parsePathString\";\nimport normalizeSegment from \"../process/normalizeSegment\";\nimport paramsParser from \"../parser/paramsParser\";\n\n/**\n * Parses a path string value or 'pathArray' and returns a new one\n * in which all segments are converted to cubic-bezier.\n *\n * In addition, un-necessary `Z` segment is removed if previous segment\n * extends to the `M` segment.\n *\n * @param pathInput the string to be parsed or 'pathArray'\n * @returns the resulted `pathArray` converted to cubic-bezier\n */\nconst pathToCurve = (pathInput: string | PathArray): CurveArray => {\n  const params = { ...paramsParser };\n  const path = parsePathString(pathInput);\n\n  return iterate<CurveArray>(path, (seg, index, lastX, lastY) => {\n    params.x = lastX;\n    params.y = lastY;\n    const normalSegment = normalizeSegment(seg, params);\n    let result = segmentToCubic(normalSegment, params);\n    const isLongArc = result[0] === \"C\" && result.length > 7;\n\n    if (isLongArc) {\n      path.splice(\n        index + 1,\n        0,\n        [\"C\" as AbsoluteCommand | number].concat(result.slice(7)) as CSegment,\n      );\n      result = result.slice(0, 7) as CSegment;\n    }\n\n    const seglen = result.length;\n    params.x1 = +result[seglen - 2];\n    params.y1 = +result[seglen - 1];\n    params.x2 = +result[seglen - 4] || params.x1;\n    params.y2 = +result[seglen - 3] || params.y1;\n\n    return result;\n  });\n};\nexport default pathToCurve;\n","const roundTo = (n: number, round: number) => {\n  const pow = round >= 1 ? 10 ** round : 1;\n\n  return round > 0 ? Math.round(n * pow) / pow : Math.round(n);\n};\n\nexport default roundTo;\n","import type { PathArray, PathSegment } from \"../types\";\nimport defaultOptions from \"../options/options\";\nimport roundTo from \"../math/roundTo\";\n\n/**\n * Returns a valid `d` attribute string value created\n * by rounding values and concatenating the `pathArray` segments.\n *\n * @param path the `pathArray` object\n * @param roundOption amount of decimals to round values to\n * @returns the concatenated path string\n */\nconst pathToString = (\n  path: PathArray,\n  roundOption?: number | \"off\",\n): string => {\n  const pathLen = path.length;\n  let { round } = defaultOptions;\n  let segment = path[0] as PathSegment;\n  let result = \"\";\n\n  // allow for ZERO decimals\n  round = roundOption === \"off\"\n    ? roundOption\n    : typeof roundOption === \"number\" && roundOption >= 0\n    ? roundOption\n    : typeof round === \"number\" && round >= 0\n    ? round\n    : /* istanbul ignore next @preserve */ \"off\";\n\n  for (let i = 0; i < pathLen; i += 1) {\n    segment = path[i];\n    const [pathCommand] = segment;\n    const values = segment.slice(1) as number[];\n    result += pathCommand;\n    if (round === \"off\") {\n      result += values.join(\" \");\n    } else {\n      let j = 0;\n      const valLen = values.length;\n      while (j < valLen) {\n        result += roundTo(values[j], round);\n        if (j !== valLen - 1) result += \" \";\n        j += 1;\n      }\n    }\n  }\n\n  return result;\n};\n\nexport default pathToString;\n","import { type PointTuple } from \"../types\";\n\n/**\n * Returns the square root of the distance\n * between two given points.\n *\n * @param a the first point coordinates\n * @param b the second point coordinates\n * @returns the distance value\n */\nconst distanceSquareRoot = (a: PointTuple, b: PointTuple) => {\n  return Math.sqrt(\n    (a[0] - b[0]) * (a[0] - b[0]) + (a[1] - b[1]) * (a[1] - b[1]),\n  );\n};\n\nexport default distanceSquareRoot;\n","import midPoint from \"./midPoint\";\nimport distanceSquareRoot from \"./distanceSquareRoot\";\n\n/**\n * Returns length for line segments (MoveTo, LineTo).\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @returns the line segment length\n */\nconst getLineLength = (x1: number, y1: number, x2: number, y2: number) => {\n  return distanceSquareRoot([x1, y1], [x2, y2]);\n};\n\n/**\n * Returns a point along the line segments (MoveTo, LineTo).\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param distance the distance to point in [0-1] range\n * @returns the point at length\n */\nconst getPointAtLineLength = (\n  x1: number,\n  y1: number,\n  x2: number,\n  y2: number,\n  distance?: number,\n) => {\n  let point = { x: x1, y: y1 };\n\n  /* istanbul ignore else @preserve */\n  if (typeof distance === \"number\") {\n    const length = distanceSquareRoot([x1, y1], [x2, y2]);\n    if (distance <= 0) {\n      point = { x: x1, y: y1 };\n    } else if (distance >= length) {\n      point = { x: x2, y: y2 };\n    } else {\n      const [x, y] = midPoint([x1, y1], [x2, y2], distance / length);\n      point = { x, y };\n    }\n  }\n  return point;\n};\n\n/**\n * Returns bounding box for line segments (MoveTo, LineTo).\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param distance the distance to point in [0-1] range\n * @returns the extrema for line segments\n */\nconst getLineBBox = (x1: number, y1: number, x2: number, y2: number) => {\n  const { min, max } = Math;\n\n  return [min(x1, x2), min(y1, y2), max(x1, x2), max(y1, y2)] as [\n    number,\n    number,\n    number,\n    number,\n  ];\n};\n\nexport { getLineBBox, getLineLength, getPointAtLineLength };\n","import { getPointAtLineLength } from \"./lineTools\";\nimport type { Point, PointTuple } from \"../types\";\n\n/**\n * Returns the Arc segment length.\n * @param rx radius along X axis\n * @param ry radius along Y axis\n * @param theta the angle in radians\n * @returns the arc length\n */\nconst arcLength = (rx: number, ry: number, theta: number) => {\n  const halfTheta = theta / 2;\n  const sinHalfTheta = Math.sin(halfTheta);\n  const cosHalfTheta = Math.cos(halfTheta);\n  const term1 = rx ** 2 * sinHalfTheta ** 2;\n  const term2 = ry ** 2 * cosHalfTheta ** 2;\n  const length = Math.sqrt(term1 + term2) * theta;\n  return Math.abs(length);\n};\n\n/**\n * Find point on ellipse at given angle around ellipse (theta);\n * @param cx the center X\n * @param cy the center Y\n * @param rx the radius X\n * @param ry the radius Y\n * @param alpha the arc rotation angle in radians\n * @param theta the arc sweep angle in radians\n * @returns a point around ellipse at given angle\n */\nconst arcPoint = (\n  cx: number,\n  cy: number,\n  rx: number,\n  ry: number,\n  alpha: number,\n  theta: number,\n) => {\n  const { sin, cos } = Math;\n  // theta is angle in radians around arc\n  // alpha is angle of rotation of ellipse in radians\n  const cosA = cos(alpha);\n  const sinA = sin(alpha);\n  const x = rx * cos(theta);\n  const y = ry * sin(theta);\n\n  return [cx + cosA * x - sinA * y, cy + sinA * x + cosA * y] as PointTuple;\n};\n\n/**\n * Returns the angle between two points.\n * @param v0 starting point\n * @param v1 ending point\n * @returns the angle in radian\n */\nconst angleBetween = (v0: Point, v1: Point) => {\n  const { x: v0x, y: v0y } = v0;\n  const { x: v1x, y: v1y } = v1;\n  const p = v0x * v1x + v0y * v1y;\n  const n = Math.sqrt((v0x ** 2 + v0y ** 2) * (v1x ** 2 + v1y ** 2));\n  const sign = v0x * v1y - v0y * v1x < 0 ? -1 : 1;\n  return sign * Math.acos(p / n);\n};\n\n/**\n * Returns the following properties for an Arc segment: center, start angle,\n * end angle, and radiuses on X and Y axis.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param RX the radius on X axis\n * @param RY the radius on Y axis\n * @param angle the ellipse rotation in degrees\n * @param LAF the large arc flag\n * @param SF the sweep flag\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @returns properties specific to Arc segments\n */\nconst getArcProps = (\n  x1: number,\n  y1: number,\n  RX: number,\n  RY: number,\n  angle: number,\n  LAF: number,\n  SF: number,\n  x: number,\n  y: number,\n) => {\n  const { abs, sin, cos, sqrt, PI } = Math;\n  let rx = abs(RX);\n  let ry = abs(RY);\n  const xRot = ((angle % 360) + 360) % 360;\n  const xRotRad = xRot * (PI / 180);\n\n  // istanbul ignore next @preserve\n  if (x1 === x && y1 === y) {\n    return {\n      rx,\n      ry,\n      startAngle: 0,\n      endAngle: 0,\n      center: { x, y },\n    };\n  }\n\n  if (rx === 0 || ry === 0) {\n    return {\n      rx,\n      ry,\n      startAngle: 0,\n      endAngle: 0,\n      center: { x: (x + x1) / 2, y: (y + y1) / 2 },\n    };\n  }\n\n  const dx = (x1 - x) / 2;\n  const dy = (y1 - y) / 2;\n\n  const transformedPoint = {\n    x: cos(xRotRad) * dx + sin(xRotRad) * dy,\n    y: -sin(xRotRad) * dx + cos(xRotRad) * dy,\n  };\n\n  const radiiCheck = transformedPoint.x ** 2 / rx ** 2 +\n    transformedPoint.y ** 2 / ry ** 2;\n\n  if (radiiCheck > 1) {\n    rx *= sqrt(radiiCheck);\n    ry *= sqrt(radiiCheck);\n  }\n\n  const cSquareNumerator = rx ** 2 * ry ** 2 -\n    rx ** 2 * transformedPoint.y ** 2 - ry ** 2 * transformedPoint.x ** 2;\n  const cSquareRootDenom = rx ** 2 * transformedPoint.y ** 2 +\n    ry ** 2 * transformedPoint.x ** 2;\n\n  let cRadicand = cSquareNumerator / cSquareRootDenom;\n  /* istanbul ignore next @preserve */\n  cRadicand = cRadicand < 0 ? 0 : cRadicand;\n  const cCoef = (LAF !== SF ? 1 : -1) * sqrt(cRadicand);\n  const transformedCenter = {\n    x: cCoef * ((rx * transformedPoint.y) / ry),\n    y: cCoef * (-(ry * transformedPoint.x) / rx),\n  };\n\n  const center = {\n    x: cos(xRotRad) * transformedCenter.x - sin(xRotRad) * transformedCenter.y +\n      (x1 + x) / 2,\n    y: sin(xRotRad) * transformedCenter.x + cos(xRotRad) * transformedCenter.y +\n      (y1 + y) / 2,\n  };\n\n  const startVector = {\n    x: (transformedPoint.x - transformedCenter.x) / rx,\n    y: (transformedPoint.y - transformedCenter.y) / ry,\n  };\n\n  const startAngle = angleBetween({ x: 1, y: 0 }, startVector);\n\n  const endVector = {\n    x: (-transformedPoint.x - transformedCenter.x) / rx,\n    y: (-transformedPoint.y - transformedCenter.y) / ry,\n  };\n\n  let sweepAngle = angleBetween(startVector, endVector);\n  if (!SF && sweepAngle > 0) {\n    sweepAngle -= 2 * PI;\n  } else if (SF && sweepAngle < 0) {\n    sweepAngle += 2 * PI;\n  }\n  sweepAngle %= 2 * PI;\n\n  const endAngle = startAngle + sweepAngle;\n\n  // point.ellipticalArcStartAngle = startAngle;\n  // point.ellipticalArcEndAngle = startAngle + sweepAngle;\n  // point.ellipticalArcAngle = alpha;\n\n  // point.ellipticalArcCenter = center;\n  // point.resultantRx = rx;\n  // point.resultantRy = ry;\n\n  return {\n    center,\n    startAngle,\n    endAngle,\n    rx,\n    ry,\n  };\n};\n\n/**\n * Returns the length of an Arc segment.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param c1x the first control point X\n * @param c1y the first control point Y\n * @param c2x the second control point X\n * @param c2y the second control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @returns the length of the Arc segment\n */\nconst getArcLength = (\n  x1: number,\n  y1: number,\n  RX: number,\n  RY: number,\n  angle: number,\n  LAF: number,\n  SF: number,\n  x: number,\n  y: number,\n) => {\n  const { rx, ry, startAngle, endAngle } = getArcProps(\n    x1,\n    y1,\n    RX,\n    RY,\n    angle,\n    LAF,\n    SF,\n    x,\n    y,\n  );\n  return arcLength(rx, ry, endAngle - startAngle);\n};\n\n/**\n * Returns a point along an Arc segment at a given distance.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param RX the radius on X axis\n * @param RY the radius on Y axis\n * @param angle the ellipse rotation in degrees\n * @param LAF the large arc flag\n * @param SF the sweep flag\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param distance a [0-1] ratio\n * @returns a point along the Arc segment\n */\nconst getPointAtArcLength = (\n  x1: number,\n  y1: number,\n  RX: number,\n  RY: number,\n  angle: number,\n  LAF: number,\n  SF: number,\n  x: number,\n  y: number,\n  distance?: number,\n) => {\n  let point = { x: x1, y: y1 };\n  const { center, rx, ry, startAngle, endAngle } = getArcProps(\n    x1,\n    y1,\n    RX,\n    RY,\n    angle,\n    LAF,\n    SF,\n    x,\n    y,\n  );\n\n  /* istanbul ignore else @preserve */\n  if (typeof distance === \"number\") {\n    const length = arcLength(rx, ry, endAngle - startAngle);\n    if (distance <= 0) {\n      point = { x: x1, y: y1 };\n    } else if (distance >= length) {\n      point = { x, y };\n    } else {\n      /* istanbul ignore next @preserve */\n      if (x1 === x && y1 === y) {\n        return { x, y };\n      }\n      /* istanbul ignore next @preserve */\n      if (rx === 0 || ry === 0) {\n        return getPointAtLineLength(x1, y1, x, y, distance);\n      }\n      const { PI, cos, sin } = Math;\n      const sweepAngle = endAngle - startAngle;\n      const xRot = ((angle % 360) + 360) % 360;\n      const xRotRad = xRot * (PI / 180);\n      const alpha = startAngle + sweepAngle * (distance / length);\n      const ellipseComponentX = rx * cos(alpha);\n      const ellipseComponentY = ry * sin(alpha);\n\n      point = {\n        x: cos(xRotRad) * ellipseComponentX - sin(xRotRad) * ellipseComponentY +\n          center.x,\n        y: sin(xRotRad) * ellipseComponentX + cos(xRotRad) * ellipseComponentY +\n          center.y,\n      };\n    }\n  }\n\n  return point;\n};\n\n/**\n * Returns the extrema for an Arc segment in the following format:\n * [MIN_X, MIN_Y, MAX_X, MAX_Y]\n *\n * @see https://github.com/herrstrietzel/svg-pathdata-getbbox\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param RX the radius on X axis\n * @param RY the radius on Y axis\n * @param angle the ellipse rotation in degrees\n * @param LAF the large arc flag\n * @param SF the sweep flag\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @returns the extrema of the Arc segment\n */\nconst getArcBBox = (\n  x1: number,\n  y1: number,\n  RX: number,\n  RY: number,\n  angle: number,\n  LAF: number,\n  SF: number,\n  x: number,\n  y: number,\n) => {\n  const { center, rx, ry, startAngle, endAngle } = getArcProps(\n    x1,\n    y1,\n    RX,\n    RY,\n    angle,\n    LAF,\n    SF,\n    x,\n    y,\n  );\n  const deltaAngle = endAngle - startAngle;\n  const { min, max, tan, atan2, PI } = Math;\n\n  // circle/elipse center coordinates\n  const { x: cx, y: cy } = center;\n\n  // rotation to radians\n  const alpha = (angle * PI) / 180;\n  const tangent = tan(alpha);\n\n  /**\n   * find min/max from zeroes of directional derivative along x and y\n   * along x axis\n   */\n  const theta = atan2(-ry * tangent, rx);\n  const angle1 = theta;\n  const angle2 = theta + PI;\n  const angle3 = atan2(ry, rx * tangent);\n  const angle4 = angle3 + PI;\n  const xArray = [x];\n  const yArray = [y];\n\n  // inner bounding box\n  let xMin = min(x1, x);\n  let xMax = max(x1, x);\n  let yMin = min(y1, y);\n  let yMax = max(y1, y);\n\n  // on path point close after start\n  const angleAfterStart = endAngle - deltaAngle * 0.00001;\n  const pP2 = arcPoint(cx, cy, rx, ry, alpha, angleAfterStart);\n\n  // on path point close before end\n  const angleBeforeEnd = endAngle - deltaAngle * 0.99999;\n  const pP3 = arcPoint(cx, cy, rx, ry, alpha, angleBeforeEnd);\n\n  /**\n   * expected extremes\n   * if leaving inner bounding box\n   * (between segment start and end point)\n   * otherwise exclude elliptic extreme points\n   */\n\n  // right\n  if (pP2[0] > xMax || pP3[0] > xMax) {\n    // get point for this theta\n    const p1 = arcPoint(cx, cy, rx, ry, alpha, angle1);\n    xArray.push(p1[0]);\n    yArray.push(p1[1]);\n  }\n\n  // left\n  if (pP2[0] < xMin || pP3[0] < xMin) {\n    // get anti-symmetric point\n    const p2 = arcPoint(cx, cy, rx, ry, alpha, angle2);\n    xArray.push(p2[0]);\n    yArray.push(p2[1]);\n  }\n\n  // top\n  if (pP2[1] < yMin || pP3[1] < yMin) {\n    // get anti-symmetric point\n    const p4 = arcPoint(cx, cy, rx, ry, alpha, angle4);\n    xArray.push(p4[0]);\n    yArray.push(p4[1]);\n  }\n\n  // bottom\n  if (pP2[1] > yMax || pP3[1] > yMax) {\n    // get point for this theta\n    const p3 = arcPoint(cx, cy, rx, ry, alpha, angle3);\n    xArray.push(p3[0]);\n    yArray.push(p3[1]);\n  }\n\n  xMin = min.apply([], xArray);\n  yMin = min.apply([], yArray);\n  xMax = max.apply([], xArray);\n  yMax = max.apply([], yArray);\n\n  return [xMin, yMin, xMax, yMax] as [number, number, number, number];\n};\n\nexport {\n  angleBetween,\n  arcLength,\n  arcPoint,\n  getArcBBox,\n  getArcLength,\n  getArcProps,\n  getPointAtArcLength,\n};\n","import type {\n  CubicCoordinates,\n  CubicPoints,\n  DeriveCallback,\n  DerivedCubicPoints,\n  DerivedPoint,\n  DerivedQuadPoints,\n  PointTuple,\n  QuadCoordinates,\n  QuadPoints,\n} from \"../types\";\n\n/**\n * Tools from bezier.js by Mike 'Pomax' Kamermans\n * @see https://github.com/Pomax/bezierjs\n */\n\nconst Tvalues = [\n  -0.0640568928626056260850430826247450385909,\n  0.0640568928626056260850430826247450385909,\n  -0.1911188674736163091586398207570696318404,\n  0.1911188674736163091586398207570696318404,\n  -0.3150426796961633743867932913198102407864,\n  0.3150426796961633743867932913198102407864,\n  -0.4337935076260451384870842319133497124524,\n  0.4337935076260451384870842319133497124524,\n  -0.5454214713888395356583756172183723700107,\n  0.5454214713888395356583756172183723700107,\n  -0.6480936519369755692524957869107476266696,\n  0.6480936519369755692524957869107476266696,\n  -0.7401241915785543642438281030999784255232,\n  0.7401241915785543642438281030999784255232,\n  -0.8200019859739029219539498726697452080761,\n  0.8200019859739029219539498726697452080761,\n  -0.8864155270044010342131543419821967550873,\n  0.8864155270044010342131543419821967550873,\n  -0.9382745520027327585236490017087214496548,\n  0.9382745520027327585236490017087214496548,\n  -0.9747285559713094981983919930081690617411,\n  0.9747285559713094981983919930081690617411,\n  -0.9951872199970213601799974097007368118745,\n  0.9951872199970213601799974097007368118745,\n];\n\nconst Cvalues = [\n  0.1279381953467521569740561652246953718517,\n  0.1279381953467521569740561652246953718517,\n  0.1258374563468282961213753825111836887264,\n  0.1258374563468282961213753825111836887264,\n  0.121670472927803391204463153476262425607,\n  0.121670472927803391204463153476262425607,\n  0.1155056680537256013533444839067835598622,\n  0.1155056680537256013533444839067835598622,\n  0.1074442701159656347825773424466062227946,\n  0.1074442701159656347825773424466062227946,\n  0.0976186521041138882698806644642471544279,\n  0.0976186521041138882698806644642471544279,\n  0.086190161531953275917185202983742667185,\n  0.086190161531953275917185202983742667185,\n  0.0733464814110803057340336152531165181193,\n  0.0733464814110803057340336152531165181193,\n  0.0592985849154367807463677585001085845412,\n  0.0592985849154367807463677585001085845412,\n  0.0442774388174198061686027482113382288593,\n  0.0442774388174198061686027482113382288593,\n  0.0285313886289336631813078159518782864491,\n  0.0285313886289336631813078159518782864491,\n  0.0123412297999871995468056670700372915759,\n  0.0123412297999871995468056670700372915759,\n];\n\n/**\n * @param points\n * @returns\n */\nconst deriveBezier = (points: QuadPoints | CubicPoints) => {\n  const dpoints = [] as (DerivedCubicPoints | DerivedQuadPoints)[];\n  for (let p = points, d = p.length, c = d - 1; d > 1; d -= 1, c -= 1) {\n    const list = [] as unknown as DerivedCubicPoints | DerivedQuadPoints;\n    for (let j = 0; j < c; j += 1) {\n      list.push({\n        x: c * (p[j + 1].x - p[j].x),\n        y: c * (p[j + 1].y - p[j].y),\n        t: 0,\n      });\n    }\n    dpoints.push(list);\n    p = list;\n  }\n  return dpoints;\n};\n\n/**\n * @param points\n * @param t\n */\nconst computeBezier = (\n  points: DerivedQuadPoints | DerivedCubicPoints,\n  t: number,\n) => {\n  // shortcuts\n  /* istanbul ignore next @preserve */\n  if (t === 0) {\n    points[0].t = 0;\n    return points[0];\n  }\n\n  const order = points.length - 1;\n\n  /* istanbul ignore next @preserve */\n  if (t === 1) {\n    points[order].t = 1;\n    return points[order];\n  }\n\n  const mt = 1 - t;\n  let p = points as typeof points | [\n    DerivedPoint,\n    DerivedPoint,\n    DerivedPoint,\n    DerivedPoint,\n  ];\n\n  // constant?\n  /* istanbul ignore next @preserve */\n  if (order === 0) {\n    points[0].t = t;\n    return points[0];\n  }\n\n  // linear?\n  /* istanbul ignore else @preserve */\n  if (order === 1) {\n    return {\n      x: mt * p[0].x + t * p[1].x,\n      y: mt * p[0].y + t * p[1].y,\n      t,\n    };\n  }\n\n  // quadratic/cubic curve?\n  const mt2 = mt * mt;\n  const t2 = t * t;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n  let d = 0;\n  /* istanbul ignore else @preserve */\n  if (order === 2) {\n    p = [p[0], p[1], p[2], { x: 0, y: 0 } as DerivedPoint];\n    a = mt2;\n    b = mt * t * 2;\n    c = t2;\n  } else if (order === 3) {\n    a = mt2 * mt;\n    b = mt2 * t * 3;\n    c = mt * t2 * 3;\n    d = t * t2;\n  }\n  return {\n    x: a * p[0].x + b * p[1].x + c * p[2].x + d * p[3].x,\n    y: a * p[0].y + b * p[1].y + c * p[2].y + d * p[3].y,\n    t,\n  };\n};\n\nconst calculateBezier = (derivativeFn: DeriveCallback, t: number) => {\n  const d = derivativeFn(t);\n  const l = d.x * d.x + d.y * d.y;\n\n  return Math.sqrt(l);\n};\n\nconst bezierLength = (derivativeFn: DeriveCallback) => {\n  const z = 0.5;\n  const len = Tvalues.length;\n\n  let sum = 0;\n\n  for (let i = 0, t; i < len; i++) {\n    t = z * Tvalues[i] + z;\n    sum += Cvalues[i] * calculateBezier(derivativeFn, t);\n  }\n  return z * sum;\n};\n\n/**\n * Returns the length of CubicBezier / Quad segment.\n * @param curve cubic / quad bezier segment\n */\nconst getBezierLength = (curve: CubicCoordinates | QuadCoordinates) => {\n  const points = [] as unknown as CubicPoints | QuadPoints;\n  for (let idx = 0, len = curve.length, step = 2; idx < len; idx += step) {\n    points.push({\n      x: curve[idx],\n      y: curve[idx + 1],\n    });\n  }\n  const dpoints = deriveBezier(points);\n  return bezierLength((t: number) => {\n    return computeBezier(dpoints[0], t);\n  });\n};\n\n// Precision for consider cubic polynom as quadratic one\nconst CBEZIER_MINMAX_EPSILON = 0.00000001;\n\n/**\n * Returns the most extreme points in a Quad Bezier segment.\n * @param A an array which consist of X/Y values\n */\n// https://github.com/kpym/SVGPathy/blob/acd1a50c626b36d81969f6e98e8602e128ba4302/lib/box.js#L89\nconst minmaxQ = ([v1, cp, v2]: [number, number, number]) => {\n  const min = Math.min(v1, v2);\n  const max = Math.max(v1, v2);\n\n  /* istanbul ignore next @preserve */\n  if (cp >= v1 ? v2 >= cp : v2 <= cp) {\n    // if no extremum in ]0,1[\n    return [min, max] as PointTuple;\n  }\n\n  // check if the extremum E is min or max\n  const E = (v1 * v2 - cp * cp) / (v1 - 2 * cp + v2);\n  return (E < min ? [E, max] : [min, E]) as PointTuple;\n};\n\n/**\n * Returns the most extreme points in a Cubic Bezier segment.\n * @param A an array which consist of X/Y values\n * @see https://github.com/kpym/SVGPathy/blob/acd1a50c626b36d81969f6e98e8602e128ba4302/lib/box.js#L127\n */\nconst minmaxC = ([v1, cp1, cp2, v2]: [number, number, number, number]) => {\n  const K = v1 - 3 * cp1 + 3 * cp2 - v2;\n\n  // if the polynomial is (almost) quadratic and not cubic\n  /* istanbul ignore next @preserve */\n  if (Math.abs(K) < CBEZIER_MINMAX_EPSILON) {\n    if (v1 === v2 && v1 === cp1) {\n      // no curve, point targeting same location\n      return [v1, v2] as PointTuple;\n    }\n\n    return minmaxQ([v1, -0.5 * v1 + 1.5 * cp1, v1 - 3 * cp1 + 3 * cp2]);\n  }\n\n  // the reduced discriminant of the derivative\n  const T = -v1 * cp2 + v1 * v2 - cp1 * cp2 - cp1 * v2 + cp1 * cp1 + cp2 * cp2;\n\n  // if the polynomial is monotone in [0,1]\n  if (T <= 0) {\n    return [Math.min(v1, v2), Math.max(v1, v2)] as PointTuple;\n  }\n  const S = Math.sqrt(T);\n\n  // potential extrema\n  let min = Math.min(v1, v2);\n  let max = Math.max(v1, v2);\n\n  const L = v1 - 2 * cp1 + cp2;\n  // check local extrema\n  for (let R = (L + S) / K, i = 1; i <= 2; R = (L - S) / K, i++) {\n    // istanbul ignore next @preserve\n    if (R > 0 && R < 1) {\n      // if the extrema is for R in [0,1]\n      const Q = v1 * (1 - R) * (1 - R) * (1 - R) +\n        cp1 * 3 * (1 - R) * (1 - R) * R + cp2 * 3 * (1 - R) * R * R +\n        v2 * R * R * R;\n      if (Q < min) {\n        min = Q;\n      }\n      if (Q > max) {\n        max = Q;\n      }\n    }\n  }\n\n  return [min, max] as PointTuple;\n};\n\nexport {\n  bezierLength,\n  calculateBezier,\n  CBEZIER_MINMAX_EPSILON,\n  computeBezier,\n  Cvalues,\n  deriveBezier,\n  getBezierLength,\n  minmaxC,\n  minmaxQ,\n  Tvalues,\n};\n","import { getBezierLength, minmaxC } from \"./bezier\";\nimport { type CubicCoordinates } from \"../types\";\n\n/**\n * Returns a point at a given length of a CubicBezier segment.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param c1x the first control point X\n * @param c1y the first control point Y\n * @param c2x the second control point X\n * @param c2y the second control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param t a [0-1] ratio\n * @returns the point at cubic-bezier segment length\n */\nconst getPointAtCubicSegmentLength = (\n  [x1, y1, c1x, c1y, c2x, c2y, x2, y2]: CubicCoordinates,\n  t: number,\n) => {\n  const t1 = 1 - t;\n  return {\n    x: t1 ** 3 * x1 + 3 * t1 ** 2 * t * c1x + 3 * t1 * t ** 2 * c2x +\n      t ** 3 * x2,\n    y: t1 ** 3 * y1 + 3 * t1 ** 2 * t * c1y + 3 * t1 * t ** 2 * c2y +\n      t ** 3 * y2,\n  };\n};\n\n/**\n * Returns the length of a CubicBezier segment.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param c1x the first control point X\n * @param c1y the first control point Y\n * @param c2x the second control point X\n * @param c2y the second control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @returns the CubicBezier segment length\n */\nconst getCubicLength = (\n  x1: number,\n  y1: number,\n  c1x: number,\n  c1y: number,\n  c2x: number,\n  c2y: number,\n  x2: number,\n  y2: number,\n) => {\n  return getBezierLength([x1, y1, c1x, c1y, c2x, c2y, x2, y2]);\n};\n\n/**\n * Returns the point along a CubicBezier segment at a given distance.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param c1x the first control point X\n * @param c1y the first control point Y\n * @param c2x the second control point X\n * @param c2y the second control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param distance the distance to look at\n * @returns the point at CubicBezier length\n */\nconst getPointAtCubicLength = (\n  x1: number,\n  y1: number,\n  c1x: number,\n  c1y: number,\n  c2x: number,\n  c2y: number,\n  x2: number,\n  y2: number,\n  distance?: number,\n) => {\n  const distanceIsNumber = typeof distance === \"number\";\n  let point = { x: x1, y: y1 };\n  /* istanbul ignore else @preserve */\n  if (distanceIsNumber) {\n    const currentLength = getBezierLength([x1, y1, c1x, c1y, c2x, c2y, x2, y2]);\n    if (distance <= 0) {\n      // first point already defined\n    } else if (distance >= currentLength) {\n      point = { x: x2, y: y2 };\n    } else {\n      point = getPointAtCubicSegmentLength(\n        [x1, y1, c1x, c1y, c2x, c2y, x2, y2],\n        distance / currentLength,\n      );\n    }\n  }\n  return point;\n};\n\n/**\n * Returns the boundig box of a CubicBezier segment in the following format:\n * [MIN_X, MIN_Y, MAX_X, MAX_Y]\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param c1x the first control point X\n * @param c1y the first control point Y\n * @param c2x the second control point X\n * @param c2y the second control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @returns the extrema of the CubicBezier segment\n */\nconst getCubicBBox = (\n  x1: number,\n  y1: number,\n  c1x: number,\n  c1y: number,\n  c2x: number,\n  c2y: number,\n  x2: number,\n  y2: number,\n) => {\n  const cxMinMax = minmaxC([x1, c1x, c2x, x2]);\n  const cyMinMax = minmaxC([y1, c1y, c2y, y2]);\n\n  return [cxMinMax[0], cyMinMax[0], cxMinMax[1], cyMinMax[1]] as [\n    number,\n    number,\n    number,\n    number,\n  ];\n};\n\nexport {\n  getCubicBBox,\n  getCubicLength,\n  getPointAtCubicLength,\n  getPointAtCubicSegmentLength,\n};\n","import { getBezierLength, minmaxQ } from \"./bezier\";\nimport { type QuadCoordinates } from \"../types\";\n\n/**\n * Returns the {x,y} coordinates of a point at a\n * given length of a quadratic-bezier segment.\n *\n * @see https://github.com/substack/point-at-length\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param cx the control point X\n * @param cy the control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param t a [0-1] ratio\n * @returns the requested {x,y} coordinates\n */\nconst getPointAtQuadSegmentLength = (\n  [x1, y1, cx, cy, x2, y2]: QuadCoordinates,\n  t: number,\n) => {\n  const t1 = 1 - t;\n  return {\n    x: t1 ** 2 * x1 + 2 * t1 * t * cx + t ** 2 * x2,\n    y: t1 ** 2 * y1 + 2 * t1 * t * cy + t ** 2 * y2,\n  };\n};\n\n/**\n * Returns the length of a QuadraticBezier segment.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param cx the control point X\n * @param cy the control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @returns the QuadraticBezier segment length\n */\nconst getQuadLength = (\n  x1: number,\n  y1: number,\n  cx: number,\n  cy: number,\n  x2: number,\n  y2: number,\n) => {\n  return getBezierLength([x1, y1, cx, cy, x2, y2]);\n};\n\n/**\n * Returns the point along a QuadraticBezier segment at a given distance.\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param cx the control point X\n * @param cy the control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @param distance the distance to look at\n * @returns the point at QuadraticBezier length\n */\nconst getPointAtQuadLength = (\n  x1: number,\n  y1: number,\n  cx: number,\n  cy: number,\n  x2: number,\n  y2: number,\n  distance?: number,\n) => {\n  const distanceIsNumber = typeof distance === \"number\";\n  let point = { x: x1, y: y1 };\n\n  /* istanbul ignore else @preserve */\n  if (distanceIsNumber) {\n    const currentLength = getBezierLength([x1, y1, cx, cy, x2, y2]);\n    if (distance <= 0) {\n      // first point already defined\n    } else if (distance >= currentLength) {\n      point = { x: x2, y: y2 };\n    } else {\n      point = getPointAtQuadSegmentLength(\n        [x1, y1, cx, cy, x2, y2],\n        distance / currentLength,\n      );\n    }\n  }\n  return point;\n};\n\n/**\n * Returns the boundig box of a QuadraticBezier segment in the following format:\n * [MIN_X, MIN_Y, MAX_X, MAX_Y]\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param cx the control point X\n * @param cy the control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @returns the extrema of the QuadraticBezier segment\n */\nconst getQuadBBox = (\n  x1: number,\n  y1: number,\n  cx: number,\n  cy: number,\n  x2: number,\n  y2: number,\n) => {\n  const cxMinMax = minmaxQ([x1, cx, x2]);\n  const cyMinMax = minmaxQ([y1, cy, y2]);\n  return [cxMinMax[0], cyMinMax[0], cxMinMax[1], cyMinMax[1]] as [\n    number,\n    number,\n    number,\n    number,\n  ];\n};\n\nexport {\n  getPointAtQuadLength,\n  getPointAtQuadSegmentLength,\n  getQuadBBox,\n  getQuadLength,\n};\n","import distanceSquareRoot from \"./distanceSquareRoot\";\nimport { type PointTuple } from \"../types\";\n\n/**\n * d3-polygon-area\n * https://github.com/d3/d3-polygon\n *\n * Returns the area of a polygon.\n *\n * @param polygon an array of coordinates\n * @returns the polygon area\n */\nconst polygonArea = (polygon: PointTuple[]) => {\n  const n = polygon.length;\n  let i = -1;\n  let a: PointTuple;\n  let b = polygon[n - 1];\n  let area = 0;\n\n  /* eslint-disable-next-line */\n  while (++i < n) {\n    a = b;\n    b = polygon[i];\n    area += a[1] * b[0] - a[0] * b[1];\n  }\n\n  return area / 2;\n};\n\n/**\n * d3-polygon-length\n * https://github.com/d3/d3-polygon\n *\n * Returns the perimeter of a polygon.\n *\n * @param polygon an array of coordinates\n * @returns the polygon length\n */\nconst polygonLength = (polygon: PointTuple[]) => {\n  return polygon.reduce((length, point, i) => {\n    if (i) {\n      return length + distanceSquareRoot(polygon[i - 1], point);\n    }\n    return 0;\n  }, 0);\n};\n\nexport { polygonArea, polygonLength };\n","const DISTANCE_EPSILON = 0.00001;\n\nexport default DISTANCE_EPSILON;\n","import normalizeSegment from \"./normalizeSegment\";\nimport type { NormalArray, PathArray } from \"../types\";\nimport iterate from \"./iterate\";\nimport parsePathString from \"../parser/parsePathString\";\nimport paramsParser from \"../parser/paramsParser\";\n\n/**\n * Normalizes a `pathArray` object for further processing:\n * * convert segments to absolute values\n * * convert shorthand path commands to their non-shorthand notation\n *\n * @param pathInput the string to be parsed or 'pathArray'\n * @returns the normalized `pathArray`\n */\nconst normalizePath = (pathInput: string | PathArray) => {\n  const path = parsePathString(pathInput);\n  const params = { ...paramsParser };\n\n  return iterate<NormalArray>(path, (seg, _, lastX, lastY) => {\n    params.x = lastX;\n    params.y = lastY;\n    const result = normalizeSegment(seg, params);\n\n    const seglen = result.length;\n    params.x1 = +result[seglen - 2];\n    params.y1 = +result[seglen - 1];\n    params.x2 = +result[seglen - 4] || params.x1;\n    params.y2 = +result[seglen - 3] || params.y1;\n\n    return result;\n  });\n};\nexport default normalizePath;\n","import DISTANCE_EPSILON from \"./distanceEpsilon\";\nimport type { MSegment, PathArray, PointTuple } from \"../types\";\nimport iterate from \"../process/iterate\";\nimport { getLineLength, getPointAtLineLength } from \"../math/lineTools\";\nimport { getArcLength, getPointAtArcLength } from \"../math/arcTools\";\nimport { getCubicLength, getPointAtCubicLength } from \"../math/cubicTools\";\nimport { getPointAtQuadLength, getQuadLength } from \"../math/quadTools\";\nimport normalizePath from \"../process/normalizePath\";\n\n/**\n * Returns [x,y] coordinates of a point at a given length of a shape.\n *\n * @param pathInput the `pathArray` to look into\n * @param distance the length of the shape to look at\n * @returns the requested {x, y} point coordinates\n */\nconst getPointAtLength = (pathInput: string | PathArray, distance?: number) => {\n  const path = normalizePath(pathInput);\n  let isM = false;\n  let data = [] as number[];\n  let pathCommand = \"M\";\n  let x = 0;\n  let y = 0;\n  let [mx, my] = path[0].slice(1) as PointTuple;\n  const distanceIsNumber = typeof distance === \"number\";\n  let point = { x: mx, y: my };\n  let length = 0;\n  let POINT = point;\n  let totalLength = 0;\n\n  if (!distanceIsNumber || distance < DISTANCE_EPSILON) return point;\n\n  // for (let i = 0; i < pathLen; i += 1) {\n  iterate(path, (seg, _, lastX, lastY) => {\n    [pathCommand] = seg;\n    isM = pathCommand === \"M\";\n    data = !isM ? [lastX, lastY].concat(seg.slice(1) as number[]) : data;\n\n    // this segment is always ZERO\n    /* istanbul ignore else @preserve */\n    if (isM) {\n      // remember mx, my for Z\n      [, mx, my] = seg as MSegment;\n      point = { x: mx, y: my };\n      length = 0;\n    } else if (pathCommand === \"L\") {\n      point = getPointAtLineLength(\n        data[0],\n        data[1],\n        data[2],\n        data[3],\n        distance - totalLength,\n      );\n      length = getLineLength(data[0], data[1], data[2], data[3]);\n    } else if (pathCommand === \"A\") {\n      point = getPointAtArcLength(\n        data[0],\n        data[1],\n        data[2],\n        data[3],\n        data[4],\n        data[5],\n        data[6],\n        data[7],\n        data[8],\n        distance - totalLength,\n      );\n      length = getArcLength(\n        data[0],\n        data[1],\n        data[2],\n        data[3],\n        data[4],\n        data[5],\n        data[6],\n        data[7],\n        data[8],\n      );\n    } else if (pathCommand === \"C\") {\n      point = getPointAtCubicLength(\n        data[0],\n        data[1],\n        data[2],\n        data[3],\n        data[4],\n        data[5],\n        data[6],\n        data[7],\n        distance - totalLength,\n      );\n      length = getCubicLength(\n        data[0],\n        data[1],\n        data[2],\n        data[3],\n        data[4],\n        data[5],\n        data[6],\n        data[7],\n      );\n    } else if (pathCommand === \"Q\") {\n      point = getPointAtQuadLength(\n        data[0],\n        data[1],\n        data[2],\n        data[3],\n        data[4],\n        data[5],\n        distance - totalLength,\n      );\n      length = getQuadLength(\n        data[0],\n        data[1],\n        data[2],\n        data[3],\n        data[4],\n        data[5],\n      );\n    } else if (pathCommand === \"Z\") {\n      data = [lastX, lastY, mx, my];\n      point = { x: mx, y: my };\n\n      length = getLineLength(data[0], data[1], data[2], data[3]);\n    }\n\n    [x, y] = data.slice(-2);\n\n    if (totalLength < distance) {\n      POINT = point;\n    } else {\n      // totalLength >= distance\n      // stop right here\n      // stop iterator now!\n      return false;\n    }\n\n    totalLength += length;\n    return;\n  });\n\n  // native `getPointAtLength` behavior when the given distance\n  // is higher than total length\n  if (distance > totalLength - DISTANCE_EPSILON) {\n    return { x, y };\n  }\n\n  return POINT;\n};\n\nexport default getPointAtLength;\n","import type { LSegment, MSegment, PathArray, PointTuple } from \"../types\";\nimport { getLineLength } from \"../math/lineTools\";\nimport { getArcLength } from \"../math/arcTools\";\nimport { getCubicLength } from \"../math/cubicTools\";\nimport { getQuadLength } from \"../math/quadTools\";\nimport iterate from \"../process/iterate\";\nimport parsePathString from \"../parser/parsePathString\";\nimport absolutizeSegment from \"../process/absolutizeSegment\";\n\n/**\n * Returns the shape total length, or the equivalent to `shape.getTotalLength()`.\n *\n * @param pathInput the target `pathArray`\n * @returns the shape total length\n */\nconst getTotalLength = (pathInput: string | PathArray) => {\n  const path = parsePathString(pathInput);\n  let paramX1 = 0;\n  let paramY1 = 0;\n  let paramX2 = 0;\n  let paramY2 = 0;\n  let paramQX = 0;\n  let paramQY = 0;\n  let pathCommand = \"M\";\n  let mx = 0;\n  let my = 0;\n  let totalLength = 0;\n\n  iterate(path, (seg, index, lastX, lastY) => {\n    [pathCommand] = seg;\n    const absCommand = pathCommand.toUpperCase();\n    const isRelative = absCommand !== pathCommand;\n    const absoluteSegment = isRelative\n      ? absolutizeSegment(seg, index, lastX, lastY)\n      : (seg.slice(0) as typeof seg);\n\n    const normalSegment = absCommand === \"V\"\n      ? ([\"L\", lastX, absoluteSegment[1]] as LSegment)\n      : absCommand === \"H\"\n      ? ([\"L\", absoluteSegment[1], lastY] as LSegment)\n      : absoluteSegment;\n    [pathCommand] = normalSegment;\n\n    if (!\"TQ\".includes(absCommand)) {\n      // optional but good to be cautious\n      paramQX = 0;\n      paramQY = 0;\n    }\n\n    // this segment is always ZERO\n    /* istanbul ignore else @preserve */\n    if (pathCommand === \"M\") {\n      // remember mx, my for Z\n      [, mx, my] = normalSegment as MSegment;\n    } else if (pathCommand === \"L\") {\n      totalLength += getLineLength(\n        lastX,\n        lastY,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n      );\n    } else if (pathCommand === \"A\") {\n      totalLength += getArcLength(\n        lastX,\n        lastY,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n        normalSegment[3] as number,\n        normalSegment[4] as number,\n        normalSegment[5] as number,\n        normalSegment[6] as number,\n        normalSegment[7] as number,\n      );\n    } else if (pathCommand === \"S\") {\n      const cp1x = paramX1 * 2 - paramX2;\n      const cp1y = paramY1 * 2 - paramY2;\n\n      totalLength += getCubicLength(\n        lastX,\n        lastY,\n        cp1x,\n        cp1y,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n        normalSegment[3] as number,\n        normalSegment[4] as number,\n      );\n    } else if (pathCommand === \"C\") {\n      totalLength += getCubicLength(\n        lastX,\n        lastY,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n        normalSegment[3] as number,\n        normalSegment[4] as number,\n        normalSegment[5] as number,\n        normalSegment[6] as number,\n      );\n    } else if (pathCommand === \"T\") {\n      paramQX = paramX1 * 2 - paramQX;\n      paramQY = paramY1 * 2 - paramQY;\n      totalLength += getQuadLength(\n        lastX,\n        lastY,\n        paramQX,\n        paramQY,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n      );\n    } else if (pathCommand === \"Q\") {\n      paramQX = normalSegment[1] as number;\n      paramQY = normalSegment[2] as number;\n      totalLength += getQuadLength(\n        lastX,\n        lastY,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n        normalSegment[3] as number,\n        normalSegment[4] as number,\n      );\n    } else if (pathCommand === \"Z\") {\n      totalLength += getLineLength(lastX, lastY, mx, my);\n    }\n\n    // update params\n    [paramX1, paramY1] = pathCommand === \"Z\"\n      ? [mx, my]\n      : (normalSegment.slice(-2) as PointTuple);\n    [paramX2, paramY2] = pathCommand === \"C\"\n      ? ([normalSegment[3], normalSegment[4]] as PointTuple)\n      : pathCommand === \"S\"\n      ? ([normalSegment[1], normalSegment[2]] as PointTuple)\n      : [paramX1, paramY1];\n  });\n\n  return totalLength;\n};\n\nexport default getTotalLength;\n","import type { PathArray, PathSegment } from \"../types\";\nimport type { SegmentProperties } from \"../interface\";\nimport parsePathString from \"../parser/parsePathString\";\nimport getTotalLength from \"./getTotalLength\";\n\n/**\n * Returns the segment, its index and length as well as\n * the length to that segment at a given length in a path.\n *\n * @param pathInput target `pathArray`\n * @param distance the given length\n * @returns the requested properties\n */\nconst getPropertiesAtLength = (\n  pathInput: string | PathArray,\n  distance?: number,\n): SegmentProperties => {\n  const pathArray = parsePathString(pathInput);\n\n  let pathTemp = pathArray.slice(0) as PathArray;\n  let pathLength = getTotalLength(pathTemp);\n  let index = pathTemp.length - 1;\n  let lengthAtSegment = 0;\n  let length = 0;\n  let segment = pathArray[0] as PathSegment;\n\n  // If the path is empty, return 0.\n  if (index <= 0 || !distance || !Number.isFinite(distance)) {\n    return {\n      segment,\n      index: 0,\n      length,\n      lengthAtSegment,\n    };\n  }\n\n  if (distance >= pathLength) {\n    pathTemp = pathArray.slice(0, -1) as PathArray;\n    lengthAtSegment = getTotalLength(pathTemp);\n    length = pathLength - lengthAtSegment;\n    segment = pathArray[index];\n    return {\n      segment,\n      index,\n      length,\n      lengthAtSegment,\n    };\n  }\n\n  const segments = [] as SegmentProperties[];\n  while (index > 0) {\n    segment = pathTemp[index];\n    pathTemp = pathTemp.slice(0, -1) as PathArray;\n    lengthAtSegment = getTotalLength(pathTemp);\n    length = pathLength - lengthAtSegment;\n    pathLength = lengthAtSegment;\n\n    segments.push({\n      segment,\n      index,\n      length,\n      lengthAtSegment,\n    });\n    index -= 1;\n  }\n\n  return segments.find(({ lengthAtSegment: l }) =>\n    l <= distance\n  ) as SegmentProperties;\n};\n\nexport default getPropertiesAtLength;\n","import type { PathArray, Point } from \"../types\";\nimport type { PointProperties } from \"../interface\";\nimport getPointAtLength from \"./getPointAtLength\";\nimport getPropertiesAtLength from \"./getPropertiesAtLength\";\nimport getTotalLength from \"./getTotalLength\";\nimport parsePathString from \"../parser/parsePathString\";\nimport normalizePath from \"../process/normalizePath\";\n\n/**\n * Returns the point and segment in path closest to a given point as well as\n * the distance to the path stroke.\n *\n * @see https://bl.ocks.org/mbostock/8027637\n *\n * @param pathInput target `pathArray`\n * @param point the given point\n * @returns the requested properties\n */\nconst getPropertiesAtPoint = (\n  pathInput: string | PathArray,\n  point: Point,\n): PointProperties => {\n  const path = parsePathString(pathInput);\n  const normalPath = normalizePath(path);\n  const pathLength = getTotalLength(normalPath);\n  const distanceTo = (p: Point) => {\n    const dx = p.x - point.x;\n    const dy = p.y - point.y;\n    return dx * dx + dy * dy;\n  };\n  let precision = 8;\n  let scan: Point;\n  let closest = { x: 0, y: 0 }; // make TS happy\n  let scanDistance = 0;\n  let bestLength = 0;\n  let bestDistance = Infinity;\n\n  // linear scan for coarse approximation\n  for (let scanLength = 0; scanLength <= pathLength; scanLength += precision) {\n    scan = getPointAtLength(normalPath, scanLength);\n    scanDistance = distanceTo(scan);\n\n    if (scanDistance < bestDistance) {\n      closest = scan;\n      bestLength = scanLength;\n      bestDistance = scanDistance;\n    }\n  }\n\n  // binary search for precise estimate\n  precision /= 2;\n  let before: { x: number; y: number };\n  let after: { x: number; y: number };\n  let beforeLength = 0;\n  let afterLength = 0;\n  let beforeDistance = 0;\n  let afterDistance = 0;\n\n  while (precision > 0.000001) {\n    beforeLength = bestLength - precision;\n    before = getPointAtLength(normalPath, beforeLength);\n    beforeDistance = distanceTo(before);\n    afterLength = bestLength + precision;\n    after = getPointAtLength(normalPath, afterLength);\n    afterDistance = distanceTo(after);\n\n    if (beforeLength >= 0 && beforeDistance < bestDistance) {\n      closest = before;\n      bestLength = beforeLength;\n      bestDistance = beforeDistance;\n    } else if (afterLength <= pathLength && afterDistance < bestDistance) {\n      closest = after;\n      bestLength = afterLength;\n      bestDistance = afterDistance;\n    } else {\n      precision /= 2;\n    }\n    if (precision < 0.00001) break;\n  }\n\n  const segment = getPropertiesAtLength(path, bestLength);\n  const distance = Math.sqrt(bestDistance);\n\n  return { closest, distance, segment };\n};\n\nexport default getPropertiesAtPoint;\n","import type { PathArray } from \"../types\";\nimport getPropertiesAtPoint from \"./getPropertiesAtPoint\";\n\n/**\n * Returns the point in path closest to a given point.\n *\n * @param pathInput target `pathArray`\n * @param point the given point\n * @returns the best match\n */\nconst getClosestPoint = (\n  pathInput: string | PathArray,\n  point: { x: number; y: number },\n) => {\n  return getPropertiesAtPoint(pathInput, point).closest;\n};\n\nexport default getClosestPoint;\n","import pathToCurve from \"../convert/pathToCurve\";\nimport type { PathArray, PointTuple } from \"../types\";\n\n/**\n * Returns the area of a single cubic-bezier segment.\n *\n * http://objectmix.com/graphics/133553-area-closed-bezier-curve.html\n *\n * @param x1 the starting point X\n * @param y1 the starting point Y\n * @param c1x the first control point X\n * @param c1y the first control point Y\n * @param c2x the second control point X\n * @param c2y the second control point Y\n * @param x2 the ending point X\n * @param y2 the ending point Y\n * @returns the area of the cubic-bezier segment\n */\nconst getCubicSegArea = (\n  x1: number,\n  y1: number,\n  c1x: number,\n  c1y: number,\n  c2x: number,\n  c2y: number,\n  x2: number,\n  y2: number,\n) => {\n  return (\n    (3 *\n      ((y2 - y1) * (c1x + c2x) -\n        (x2 - x1) * (c1y + c2y) +\n        c1y * (x1 - c2x) -\n        c1x * (y1 - c2y) +\n        y2 * (c2x + x1 / 3) -\n        x2 * (c2y + y1 / 3))) /\n    20\n  );\n};\n\n/**\n * Returns the area of a shape.\n *\n * @author Jürg Lehni & Jonathan Puckey\n *\n * @see https://github.com/paperjs/paper.js/blob/develop/src/path/Path.js\n *\n * @param path the shape `pathArray`\n * @returns the length of the cubic-bezier segment\n */\nconst getPathArea = (path: PathArray) => {\n  let x = 0;\n  let y = 0;\n  let len = 0;\n\n  return pathToCurve(path)\n    .map((seg) => {\n      switch (seg[0]) {\n        case \"M\":\n          [, x, y] = seg;\n          return 0;\n        default:\n          len = getCubicSegArea(\n            x,\n            y,\n            seg[1],\n            seg[2],\n            seg[3],\n            seg[4],\n            seg[5],\n            seg[6],\n          );\n          [x, y] = seg.slice(-2) as PointTuple;\n          return len;\n      }\n    })\n    .reduce((a, b) => a + b, 0);\n};\nexport default getPathArea;\n","import getPathArea from \"./getPathArea\";\nimport pathToCurve from \"../convert/pathToCurve\";\nimport type { PathArray } from \"../types\";\n\n/**\n * Check if a path is drawn clockwise and returns true if so,\n * false otherwise.\n *\n * @param path the path string or `pathArray`\n * @returns true when clockwise or false if not\n */\nconst getDrawDirection = (path: string | PathArray) => {\n  return getPathArea(pathToCurve(path)) >= 0;\n};\n\nexport default getDrawDirection;\n","import iterate from \"../process/iterate\";\nimport { PathBBox } from \"../interface\";\nimport { LSegment, MSegment, PathArray, PointTuple } from \"../types\";\nimport { getLineBBox } from \"../math/lineTools\";\nimport { getArcBBox } from \"../math/arcTools\";\nimport { getCubicBBox } from \"../math/cubicTools\";\nimport { getQuadBBox } from \"../math/quadTools\";\nimport parsePathString from \"../parser/parsePathString\";\nimport absolutizeSegment from \"../process/absolutizeSegment\";\n\nconst getPathBBox = (pathInput: PathArray | string) => {\n  if (!pathInput) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      x2: 0,\n      y2: 0,\n      cx: 0,\n      cy: 0,\n      cz: 0,\n    };\n  }\n\n  const path = parsePathString(pathInput);\n  let pathCommand = \"M\";\n  let mx = 0;\n  let my = 0;\n  const { max, min } = Math;\n  let xMin = Infinity;\n  let yMin = Infinity;\n  let xMax = -Infinity;\n  let yMax = -Infinity;\n  let minX = 0;\n  let minY = 0;\n  let maxX = 0;\n  let maxY = 0;\n  let paramX1 = 0;\n  let paramY1 = 0;\n  let paramX2 = 0;\n  let paramY2 = 0;\n  let paramQX = 0;\n  let paramQY = 0;\n\n  iterate(path, (seg, index, lastX, lastY) => {\n    [pathCommand] = seg;\n    const absCommand = pathCommand.toUpperCase();\n    const isRelative = absCommand !== pathCommand;\n    const absoluteSegment = isRelative\n      ? absolutizeSegment(seg, index, lastX, lastY)\n      : (seg.slice(0) as typeof seg);\n\n    const normalSegment = absCommand === \"V\"\n      ? ([\"L\", lastX, absoluteSegment[1]] as LSegment)\n      : absCommand === \"H\"\n      ? ([\"L\", absoluteSegment[1], lastY] as LSegment)\n      : absoluteSegment;\n\n    [pathCommand] = normalSegment;\n\n    if (!\"TQ\".includes(absCommand)) {\n      // optional but good to be cautious\n      paramQX = 0;\n      paramQY = 0;\n    }\n\n    // this segment is always ZERO\n    /* istanbul ignore else @preserve */\n    if (pathCommand === \"M\") {\n      [, mx, my] = normalSegment as MSegment;\n      minX = mx;\n      minY = my;\n      maxX = mx;\n      maxY = my;\n    } else if (pathCommand === \"L\") {\n      [minX, minY, maxX, maxY] = getLineBBox(\n        lastX,\n        lastY,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n      );\n    } else if (pathCommand === \"A\") {\n      [minX, minY, maxX, maxY] = getArcBBox(\n        lastX,\n        lastY,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n        normalSegment[3] as number,\n        normalSegment[4] as number,\n        normalSegment[5] as number,\n        normalSegment[6] as number,\n        normalSegment[7] as number,\n      );\n    } else if (pathCommand === \"S\") {\n      const cp1x = paramX1 * 2 - paramX2;\n      const cp1y = paramY1 * 2 - paramY2;\n\n      [minX, minY, maxX, maxY] = getCubicBBox(\n        lastX,\n        lastY,\n        cp1x,\n        cp1y,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n        normalSegment[3] as number,\n        normalSegment[4] as number,\n      );\n    } else if (pathCommand === \"C\") {\n      [minX, minY, maxX, maxY] = getCubicBBox(\n        lastX,\n        lastY,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n        normalSegment[3] as number,\n        normalSegment[4] as number,\n        normalSegment[5] as number,\n        normalSegment[6] as number,\n      );\n    } else if (pathCommand === \"T\") {\n      paramQX = paramX1 * 2 - paramQX;\n      paramQY = paramY1 * 2 - paramQY;\n      [minX, minY, maxX, maxY] = getQuadBBox(\n        lastX,\n        lastY,\n        paramQX,\n        paramQY,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n      );\n    } else if (pathCommand === \"Q\") {\n      paramQX = normalSegment[1] as number;\n      paramQY = normalSegment[2] as number;\n      [minX, minY, maxX, maxY] = getQuadBBox(\n        lastX,\n        lastY,\n        normalSegment[1] as number,\n        normalSegment[2] as number,\n        normalSegment[3] as number,\n        normalSegment[4] as number,\n      );\n    } else if (pathCommand === \"Z\") {\n      [minX, minY, maxX, maxY] = getLineBBox(lastX, lastY, mx, my);\n    }\n    xMin = min(minX, xMin);\n    yMin = min(minY, yMin);\n    xMax = max(maxX, xMax);\n    yMax = max(maxY, yMax);\n\n    // update params\n    [paramX1, paramY1] = pathCommand === \"Z\"\n      ? [mx, my]\n      : (normalSegment.slice(-2) as PointTuple);\n    [paramX2, paramY2] = pathCommand === \"C\"\n      ? ([normalSegment[3], normalSegment[4]] as PointTuple)\n      : pathCommand === \"S\"\n      ? ([normalSegment[1], normalSegment[2]] as PointTuple)\n      : [paramX1, paramY1];\n  });\n\n  const width = xMax - xMin;\n  const height = yMax - yMin;\n\n  return {\n    width,\n    height,\n    x: xMin,\n    y: yMin,\n    x2: xMax,\n    y2: yMax,\n    cx: xMin + width / 2,\n    cy: yMin + height / 2,\n    // an estimated guess\n    cz: Math.max(width, height) + Math.min(width, height) / 2,\n  } satisfies PathBBox;\n};\n\nexport default getPathBBox;\n","import type { PathArray, PathSegment } from \"../types\";\nimport getPropertiesAtLength from \"./getPropertiesAtLength\";\n\n/**\n * Returns the segment at a given length.\n *\n * @param pathInput the target `pathArray`\n * @param distance the distance in path to look at\n * @returns the requested segment\n */\nconst getSegmentAtLength = (\n  pathInput: string | PathArray,\n  distance?: number,\n): PathSegment | undefined => {\n  return getPropertiesAtLength(pathInput, distance).segment;\n};\n\nexport default getSegmentAtLength;\n","import type { SegmentProperties } from \"../interface\";\nimport type { PathArray } from \"../types\";\nimport getPropertiesAtPoint from \"./getPropertiesAtPoint\";\n\n/**\n * Returns the path segment which contains a given point.\n *\n * @param path the `pathArray` to look into\n * @param point the point of the shape to look for\n * @returns the requested segment\n */\nconst getSegmentOfPoint = (\n  path: string | PathArray,\n  point: { x: number; y: number },\n): SegmentProperties | undefined => {\n  return getPropertiesAtPoint(path, point).segment;\n};\nexport default getSegmentOfPoint;\n","import type { PathArray, PathSegment, RelativeCommand } from \"../types\";\nimport paramsCount from \"../parser/paramsCount\";\n\n/**\n * Iterates an array to check if it's an actual `pathArray`.\n *\n * @param path the `pathArray` to be checked\n * @returns iteration result\n */\nconst isPathArray = (path: unknown): path is PathArray => {\n  return (\n    Array.isArray(path) &&\n    path.every((seg: PathSegment) => {\n      const lk = seg[0].toLowerCase() as RelativeCommand;\n      return (\n        paramsCount[lk] === seg.length - 1 &&\n        \"achlmqstvz\".includes(lk) &&\n        (seg.slice(1) as unknown[]).every(Number.isFinite)\n      );\n    }) &&\n    path.length > 0\n  );\n};\nexport default isPathArray;\n","import type { AbsoluteArray } from \"../types\";\nimport isPathArray from \"./isPathArray\";\n\n/**\n * Iterates an array to check if it's a `pathArray`\n * with all absolute values.\n *\n * @param path the `pathArray` to be checked\n * @returns iteration result\n */\nconst isAbsoluteArray = (path: unknown): path is AbsoluteArray => {\n  return (\n    isPathArray(path) &&\n    // `isPathArray` also checks if it's `Array`\n    path.every(([x]) => x === x.toUpperCase())\n  );\n};\nexport default isAbsoluteArray;\n","import type { NormalArray } from \"../types\";\nimport isAbsoluteArray from \"./isAbsoluteArray\";\n\n/**\n * Iterates an array to check if it's a `pathArray`\n * with all segments are in non-shorthand notation\n * with absolute values.\n *\n * @param {string | SVGPath.pathArray} path the `pathArray` to be checked\n * @returns {boolean} iteration result\n */\nconst isNormalizedArray = (path: unknown): path is NormalArray => {\n  // `isAbsoluteArray` also checks if it's `Array`\n  return isAbsoluteArray(path) && path.every(([pc]) => \"ACLMQZ\".includes(pc));\n};\nexport default isNormalizedArray;\n","import { CurveArray } from \"../types\";\nimport isNormalizedArray from \"./isNormalizedArray\";\n\n/**\n * Iterates an array to check if it's a `pathArray`\n * with all C (cubic bezier) segments.\n *\n * @param path the `Array` to be checked\n * @returns iteration result\n */\nconst isCurveArray = (path: unknown): path is CurveArray => {\n  // `isPathArray` also checks if it's `Array`\n  return isNormalizedArray(path) && path.every(([pc]) => \"MC\".includes(pc));\n};\nexport default isCurveArray;\n","import type { PathArray } from \"../types\";\nimport getPropertiesAtPoint from \"./getPropertiesAtPoint\";\nimport DISTANCE_EPSILON from \"./distanceEpsilon\";\n\n/**\n * Checks if a given point is in the stroke of a path.\n *\n * @param pathInput target path\n * @param point the given `{x,y}` point\n * @returns the query result\n */\nconst isPointInStroke = (\n  pathInput: string | PathArray,\n  point: { x: number; y: number },\n) => {\n  const { distance } = getPropertiesAtPoint(pathInput, point);\n  return Math.abs(distance) < DISTANCE_EPSILON; // 0.01 might be more permissive\n};\nexport default isPointInStroke;\n","import type { RelativeArray } from \"../types\";\nimport isPathArray from \"./isPathArray\";\n\n/**\n * Iterates an array to check if it's a `pathArray`\n * with relative values.\n *\n * @param path the `pathArray` to be checked\n * @returns iteration result\n */\nconst isRelativeArray = (path: unknown): path is RelativeArray => {\n  return (\n    isPathArray(path) &&\n    // `isPathArray` checks if it's `Array`\n    path.slice(1).every(([pc]) => pc === pc.toLowerCase())\n  );\n};\nexport default isRelativeArray;\n","import scanSegment from \"../parser/scanSegment\";\nimport skipSpaces from \"../parser/skipSpaces\";\nimport PathParser from \"../parser/pathParser\";\n\n/**\n * Parses a path string value to determine its validity\n * then returns true if it's valid or false otherwise.\n *\n * @param pathString the path string to be parsed\n * @returns the path string validity\n */\nconst isValidPath = (pathString: string) => {\n  if (typeof pathString !== \"string\" || !pathString.length) {\n    return false;\n  }\n\n  const path = new PathParser(pathString);\n\n  skipSpaces(path);\n\n  while (path.index < path.max && !path.err.length) {\n    scanSegment(path);\n  }\n\n  return !path.err.length && \"mM\".includes(path.segments[0][0]);\n};\nexport default isValidPath;\n","import type { ShapeParams } from \"../interface\";\n\n/**\n * Supported shapes and their specific parameters.\n */\nconst shapeParams: ShapeParams = {\n  line: [\"x1\", \"y1\", \"x2\", \"y2\"],\n  circle: [\"cx\", \"cy\", \"r\"],\n  ellipse: [\"cx\", \"cy\", \"rx\", \"ry\"],\n  rect: [\"width\", \"height\", \"x\", \"y\", \"rx\", \"ry\"],\n  polygon: [\"points\"],\n  polyline: [\"points\"],\n  glyph: [\"d\"],\n};\n\nexport default shapeParams;\n","const isElement = (node?: unknown): node is Element =>\n  node !== undefined && node !== null &&\n  typeof node === \"object\" &&\n  (node as Node).nodeType === 1; // ELEMENT_NODE\n\nexport default isElement;\n","import type {\n  CircleAttr,\n  EllipseAttr,\n  GlyphAttr,\n  LineAttr,\n  PolyAttr,\n  RectAttr,\n  ShapeParams,\n} from \"../interface\";\nimport type { PathArray, PathSegment, ShapeOps, ShapeTypes } from \"../types\";\nimport error from \"../parser/error\";\nimport parsePathString from \"../parser/parsePathString\";\nimport shapeParams from \"./shapeParams\";\nimport isPathArray from \"./isPathArray\";\nimport isElement from \"./isElement\";\n\n/**\n * Returns a new `pathArray` from line attributes.\n *\n * @param attr shape configuration\n * @returns a new line `pathArray`\n */\nexport const getLinePath = (attr: LineAttr): PathArray => {\n  let { x1, y1, x2, y2 } = attr;\n  [x1, y1, x2, y2] = [x1, y1, x2, y2].map((a) => +a);\n  return [\n    [\"M\", x1, y1],\n    [\"L\", x2, y2],\n  ];\n};\n\n/**\n * Returns a new `pathArray` like from polyline/polygon attributes.\n *\n * @param attr shape configuration\n * @return a new polygon/polyline `pathArray`\n */\nexport const getPolyPath = (attr: PolyAttr): PathArray => {\n  const pathArray = [] as PathSegment[];\n  const points = (attr.points || \"\")\n    .trim()\n    .split(/[\\s|,]/)\n    .map((a) => +a);\n\n  let index = 0;\n  while (index < points.length) {\n    pathArray.push([index ? \"L\" : \"M\", points[index], points[index + 1]]);\n    index += 2;\n  }\n\n  return (attr.type === \"polygon\"\n    ? [...pathArray, [\"z\"]]\n    : pathArray) as PathArray;\n};\n\n/**\n * Returns a new `pathArray` from circle attributes.\n *\n * @param attr shape configuration\n * @return a circle `pathArray`\n */\nexport const getCirclePath = (attr: CircleAttr): PathArray => {\n  let { cx, cy, r } = attr;\n  [cx, cy, r] = [cx, cy, r].map((a) => +a);\n\n  return [\n    [\"M\", cx - r, cy],\n    [\"a\", r, r, 0, 1, 0, 2 * r, 0],\n    [\"a\", r, r, 0, 1, 0, -2 * r, 0],\n  ];\n};\n\n/**\n * Returns a new `pathArray` from ellipse attributes.\n *\n * @param attr shape configuration\n * @return an ellipse `pathArray`\n */\nexport const getEllipsePath = (attr: EllipseAttr): PathArray => {\n  let { cx, cy } = attr;\n  let rx = attr.rx || 0;\n  let ry = attr.ry || rx;\n  [cx, cy, rx, ry] = [cx, cy, rx, ry].map((a) => +a);\n\n  return [\n    [\"M\", cx - rx, cy],\n    [\"a\", rx, ry, 0, 1, 0, 2 * rx, 0],\n    [\"a\", rx, ry, 0, 1, 0, -2 * rx, 0],\n  ];\n};\n\n/**\n * Returns a new `pathArray` like from rect attributes.\n *\n * @param attr object with properties above\n * @return a new `pathArray` from `<rect>` attributes\n */\nexport const getRectanglePath = (attr: RectAttr): PathArray => {\n  const x = +attr.x || 0;\n  const y = +attr.y || 0;\n  const w = +attr.width;\n  const h = +attr.height;\n  let rx = +(attr.rx || 0);\n  let ry = +(attr.ry || rx);\n\n  // Validity checks from http://www.w3.org/TR/SVG/shapes.html#RectElement:\n  if (rx || ry) {\n    // rx = !rx ? ry : rx;\n    // ry = !ry ? rx : ry;\n\n    /* istanbul ignore else @preserve */\n    if (rx * 2 > w) rx -= (rx * 2 - w) / 2;\n    /* istanbul ignore else @preserve */\n    if (ry * 2 > h) ry -= (ry * 2 - h) / 2;\n\n    return [\n      [\"M\", x + rx, y],\n      [\"h\", w - rx * 2],\n      [\"s\", rx, 0, rx, ry],\n      [\"v\", h - ry * 2],\n      [\"s\", 0, ry, -rx, ry],\n      [\"h\", -w + rx * 2],\n      [\"s\", -rx, 0, -rx, -ry],\n      [\"v\", -h + ry * 2],\n      [\"s\", 0, -ry, rx, -ry],\n    ];\n  }\n\n  return [[\"M\", x, y], [\"h\", w], [\"v\", h], [\"H\", x], [\"Z\"]];\n};\n\n/**\n * Returns a new `pathArray` created from attributes of a `<line>`, `<polyline>`,\n * `<polygon>`, `<rect>`, `<ellipse>`, `<circle>`, <path> or `<glyph>`.\n *\n * It can also work with an options object, see the type below\n * @see ShapeOps\n *\n * @param element target shape\n * @return the newly created `<path>` element\n */\nconst shapeToPathArray = (\n  element: ShapeTypes | ShapeOps,\n) => {\n  const supportedShapes = Object.keys(shapeParams) as (keyof ShapeParams)[];\n  const targetIsElement = isElement(element);\n  const tagName = targetIsElement ? element.tagName : null;\n\n  if (tagName && [...supportedShapes, \"path\"].every((s) => tagName !== s)) {\n    throw TypeError(`${error}: \"${tagName}\" is not SVGElement`);\n  }\n\n  const type =\n    (targetIsElement ? tagName : (element as ShapeOps).type) as ShapeOps[\n      \"type\"\n    ];\n  const shapeAttrs = shapeParams[type] as string[];\n  const config = { type } as Record<string, string>;\n\n  if (targetIsElement) {\n    shapeAttrs.forEach((p) => {\n      config[p] = element.getAttribute(p) as string;\n    });\n  } else {\n    Object.assign(config, element);\n  }\n\n  // set d\n  let pathArray = [] as unknown as PathArray;\n\n  /* istanbul ignore else */\n  if (type === \"circle\") {\n    pathArray = getCirclePath(config as unknown as CircleAttr);\n  } else if (type === \"ellipse\") {\n    pathArray = getEllipsePath(config as unknown as EllipseAttr);\n  } else if ([\"polyline\", \"polygon\"].includes(type)) {\n    pathArray = getPolyPath(config as unknown as PolyAttr);\n  } else if (type === \"rect\") {\n    pathArray = getRectanglePath(config as unknown as RectAttr);\n  } else if (type === \"line\") {\n    pathArray = getLinePath(config as unknown as LineAttr);\n  } else if ([\"glyph\", \"path\"].includes(type)) {\n    pathArray = parsePathString(\n      targetIsElement\n        ? element.getAttribute(\"d\") || /* istanbul ignore next @preserve */ \"\"\n        : (element as GlyphAttr).d || \"\",\n    );\n  }\n\n  // replace target element\n  if (isPathArray(pathArray) && pathArray.length) {\n    return pathArray;\n  }\n  return false;\n};\nexport default shapeToPathArray;\n","import type { ShapeParams } from \"../interface\";\nimport type { ShapeOps, ShapeTypes } from \"../types\";\nimport pathToString from \"../convert/pathToString\";\nimport defaultOptions from \"../options/options\";\nimport error from \"../parser/error\";\nimport isValidPath from \"./isValidPath\";\nimport isElement from \"./isElement\";\nimport shapeToPathArray from \"./shapeToPathArray\";\nimport shapeParams from \"./shapeParams\";\n\n/**\n * Returns a new `<path>` element created from attributes of a `<line>`, `<polyline>`,\n * `<polygon>`, `<rect>`, `<ellipse>`, `<circle>` or `<glyph>`. If `replace` parameter\n * is `true`, it will replace the target. The default `ownerDocument` is your current\n * `document` browser page, if you want to use in server-side using `jsdom`, you can\n * pass the `jsdom` `document` to `ownDocument`.\n *\n * It can also work with an options object, see the type below\n * @see ShapeOps\n *\n * The newly created `<path>` element keeps all non-specific\n * attributes like `class`, `fill`, etc.\n *\n * @param element target shape\n * @param replace option to replace target\n * @param ownerDocument document for create element\n * @return the newly created `<path>` element\n */\nconst shapeToPath = (\n  element: ShapeTypes | ShapeOps,\n  replace?: boolean,\n  ownerDocument?: Document,\n): SVGPathElement | false => {\n  const doc = ownerDocument || document;\n  const supportedShapes = Object.keys(shapeParams) as (keyof ShapeParams)[];\n  const targetIsElement = isElement(element);\n  const tagName = targetIsElement ? element.tagName : null;\n\n  if (tagName === \"path\") {\n    throw TypeError(`${error}: \"${tagName}\" is already SVGPathElement`);\n  }\n  if (tagName && supportedShapes.every((s) => tagName !== s)) {\n    throw TypeError(`${error}: \"${tagName}\" is not SVGElement`);\n  }\n\n  const path = doc.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n  const type =\n    (targetIsElement ? tagName : (element as ShapeOps).type) as ShapeOps[\n      \"type\"\n    ];\n  const shapeAttrs = shapeParams[type] as string[];\n  const config = { type } as Record<string, string>;\n\n  // set d\n  const round = defaultOptions.round as number;\n  const pathArray = shapeToPathArray(element);\n  const description = pathArray && pathArray.length\n    ? pathToString(pathArray, round)\n    : \"\";\n\n  if (targetIsElement) {\n    shapeAttrs.forEach((p) => {\n      config[p] = element.getAttribute(p) as string;\n    });\n    // set no-specific shape attributes: fill, stroke, etc\n    Object.values(element.attributes).forEach(({ name, value }) => {\n      if (!shapeAttrs.includes(name)) path.setAttribute(name, value);\n    });\n  } else {\n    Object.assign(config, element);\n    // set no-specific shape attributes: fill, stroke, etc\n    Object.keys(config).forEach((k) => {\n      if (!shapeAttrs.includes(k) && k !== \"type\") {\n        path.setAttribute(\n          k.replace(/[A-Z]/g, (m) => `-${m.toLowerCase()}`),\n          config[k],\n        );\n      }\n    });\n  }\n\n  // replace target element\n  if (isValidPath(description)) {\n    path.setAttribute(\"d\", description);\n    if (replace && targetIsElement) {\n      element.before(path, element);\n      element.remove();\n    }\n    return path;\n  }\n  return false;\n};\n\nexport default shapeToPath;\n","import CSSMatrix from \"@thednp/dommatrix\";\n// import type { TransformObject } from '../interface';\nimport type { TransformObjectValues } from \"../types\";\n\n/**\n * Returns a transformation matrix to apply to `<path>` elements.\n *\n * @see TransformObjectValues\n *\n * @param transform the `transformObject`\n * @returns a new transformation matrix\n */\nconst getSVGMatrix = (transform: TransformObjectValues): CSSMatrix => {\n  let matrix = new CSSMatrix();\n  const { origin } = transform;\n  const [originX, originY] = origin as [number, number, number];\n  const { translate } = transform;\n  const { rotate } = transform;\n  const { skew } = transform;\n  const { scale } = transform;\n\n  // set translate\n  if (\n    Array.isArray(translate) &&\n    translate.length >= 2 &&\n    translate.every((x) => !Number.isNaN(+x)) &&\n    translate.some((x) => x !== 0)\n  ) {\n    matrix = matrix.translate(...(translate as [number, number, number?]));\n  } else if (typeof translate === \"number\" && !Number.isNaN(translate)) {\n    matrix = matrix.translate(translate);\n  }\n\n  if (rotate || skew || scale) {\n    // set SVG transform-origin, always defined\n    matrix = matrix.translate(originX, originY);\n\n    // set rotation\n    if (\n      Array.isArray(rotate) &&\n      rotate.length >= 2 &&\n      rotate.every((x) => !Number.isNaN(+x)) &&\n      rotate.some((x) => x !== 0)\n    ) {\n      matrix = matrix.rotate(...(rotate as [number, number, number?]));\n    } else if (typeof rotate === \"number\" && !Number.isNaN(rotate)) {\n      matrix = matrix.rotate(rotate);\n    }\n\n    // set skew(s)\n    if (\n      Array.isArray(skew) && skew.length === 2 && skew.every((x) =>\n        !Number.isNaN(+x)\n      ) && skew.some((x) => x !== 0)\n    ) {\n      matrix = skew[0] ? matrix.skewX(skew[0]) : matrix;\n      matrix = skew[1] ? matrix.skewY(skew[1]) : matrix;\n    } else if (typeof skew === \"number\" && !Number.isNaN(skew)) {\n      matrix = matrix.skewX(skew);\n    }\n\n    // set scale\n    if (\n      Array.isArray(scale) && scale.length >= 2 && scale.every((x) =>\n        !Number.isNaN(+x)\n      ) && scale.some((x) => x !== 1)\n    ) {\n      matrix = matrix.scale(...(scale as [number, number, number?]));\n    } else if (typeof scale === \"number\" && !Number.isNaN(scale)) {\n      matrix = matrix.scale(scale);\n    }\n    // set SVG transform-origin\n    matrix = matrix.translate(-originX, -originY);\n  }\n\n  return matrix;\n};\nexport default getSVGMatrix;\n","import defaultOptions from \"../options/options\";\nimport type { ParserParams } from \"../interface\";\nimport roundTo from \"../math/roundTo\";\nimport type {\n  AbsoluteSegment,\n  NormalSegment,\n  PathCommand,\n  ShortSegment,\n  SSegment,\n  TSegment,\n} from \"../types\";\n\n/**\n * Shorten a single segment of a `pathArray` object.\n *\n * @param segment the `absoluteSegment` object\n * @param normalSegment the `normalSegment` object\n * @param params the coordinates of the previous segment\n * @param prevCommand the path command of the previous segment\n * @returns the shortened segment\n */\nconst shortenSegment = (\n  segment: AbsoluteSegment,\n  normalSegment: NormalSegment,\n  params: ParserParams,\n  prevCommand: PathCommand,\n): ShortSegment => {\n  const [pathCommand] = segment;\n  const { round: defaultRound } = defaultOptions;\n  const round = typeof defaultRound === \"number\"\n    ? defaultRound\n    : /* istanbul ignore next */ 4;\n  const normalValues = normalSegment.slice(1) as number[];\n  const { x1, y1, x2, y2, x, y } = params;\n  const [nx, ny] = normalValues.slice(-2);\n  const result = segment;\n\n  if (!\"TQ\".includes(pathCommand)) {\n    // optional but good to be cautious\n    params.qx = null;\n    params.qy = null;\n  }\n\n  if (pathCommand === \"L\") {\n    if (roundTo(x, round) === roundTo(nx, round)) {\n      return [\"V\", ny];\n    } else if (roundTo(y, round) === roundTo(ny, round)) {\n      return [\"H\", nx];\n    }\n  } else if (pathCommand === \"C\") {\n    const [nx1, ny1] = normalValues;\n    params.x1 = nx1;\n    params.y1 = ny1;\n\n    if (\n      \"CS\".includes(prevCommand) &&\n      ((roundTo(nx1, round) === roundTo(x1 * 2 - x2, round) &&\n        roundTo(ny1, round) === roundTo(y1 * 2 - y2, round)) ||\n        (roundTo(x1, round) === roundTo(x2 * 2 - x, round) &&\n          roundTo(y1, round) === roundTo(y2 * 2 - y, round)))\n    ) {\n      return [\n        \"S\",\n        normalValues[2],\n        normalValues[3],\n        normalValues[4],\n        normalValues[5],\n      ] as SSegment;\n    }\n  } else if (pathCommand === \"Q\") {\n    const [qx, qy] = normalValues;\n    params.qx = qx;\n    params.qy = qy;\n\n    if (\n      \"QT\".includes(prevCommand) &&\n      roundTo(qx, round) === roundTo(x1 * 2 - x2, round) &&\n      roundTo(qy, round) === roundTo(y1 * 2 - y2, round)\n    ) {\n      return [\"T\", normalValues[2], normalValues[3]] as TSegment;\n    }\n  }\n\n  // ['V', 'H', 'S', 'T', 'Z'].includes(pathCommand)\n  return result as ShortSegment;\n};\n\nexport default shortenSegment;\n","import type { PathCommand, PathSegment } from \"../types\";\nimport roundTo from \"../math/roundTo\";\n\nconst roundSegment = <T extends PathSegment>(\n  segment: T,\n  roundOption: number,\n) => {\n  const values = (segment.slice(1) as number[]).map((n) =>\n    roundTo(n, roundOption)\n  );\n  return [segment[0] as PathCommand | number].concat(values) as T;\n};\n\nexport default roundSegment;\n","import type { AbsoluteSegment, PathArray, PathCommand } from \"../types\";\nimport pathToAbsolute from \"../convert/pathToAbsolute\";\nimport shortenSegment from \"./shortenSegment\";\nimport paramsParser from \"../parser/paramsParser\";\nimport iterate from \"./iterate\";\nimport normalizeSegment from \"./normalizeSegment\";\nimport relativizeSegment from \"./relativizeSegment\";\nimport roundSegment from \"./roundSegment\";\n\n/**\n * Optimizes a `pathArray` object:\n * * convert segments to shorthand if possible\n * * select shortest segments from absolute and relative `pathArray`s\n *\n * @param pathInput a string or `pathArray`\n * @param roundOption the amount of decimals to round values to\n * @returns the optimized `pathArray`\n */\nconst optimizePath = (pathInput: PathArray, roundOption?: number) => {\n  const path = pathToAbsolute(pathInput);\n  // allow for ZERO decimals or use an aggressive value of 2\n  const round = typeof roundOption === \"number\" && roundOption >= 0\n    ? roundOption\n    : /* istanbul ignore next @preserve */ 2;\n  // this utility overrides the iterator params\n  const optimParams = { ...paramsParser };\n\n  const allPathCommands = [] as PathCommand[];\n  let pathCommand = \"M\" as PathCommand;\n  let prevCommand = \"Z\" as PathCommand;\n\n  return iterate(path, (seg, i, lastX, lastY) => {\n    optimParams.x = lastX;\n    optimParams.y = lastY;\n    const normalizedSegment = normalizeSegment(seg, optimParams);\n    let result = seg;\n    [pathCommand] = seg;\n\n    // Save current path command\n    allPathCommands[i] = pathCommand;\n    if (i) {\n      // Get previous path command for `shortenSegment`\n      prevCommand = allPathCommands[i - 1];\n      const shortSegment = shortenSegment(\n        seg as AbsoluteSegment,\n        normalizedSegment,\n        optimParams,\n        prevCommand,\n      );\n      const absSegment = roundSegment(shortSegment, round);\n      const absString = absSegment.join(\"\");\n      const relativeSegment = relativizeSegment(shortSegment, i, lastX, lastY);\n      const relSegment = roundSegment(relativeSegment, round);\n      const relString = relSegment.join(\"\");\n      result = absString.length < relString.length ? absSegment : relSegment;\n    }\n\n    const seglen = normalizedSegment.length;\n    optimParams.x1 = +normalizedSegment[seglen - 2];\n    optimParams.y1 = +normalizedSegment[seglen - 1];\n    optimParams.x2 = +normalizedSegment[seglen - 4] || optimParams.x1;\n    optimParams.y2 = +normalizedSegment[seglen - 3] || optimParams.y1;\n\n    return result;\n  });\n};\n\nexport default optimizePath;\n","import CSSMatrix from \"@thednp/dommatrix\";\nimport { type PointTuple } from \"../types\";\n\n/**\n * Transforms a specified point using a matrix, returning a new\n * Tuple *Object* comprising of the transformed point.\n * Neither the matrix nor the original point are altered.\n *\n * @copyright thednp © 2021\n *\n * @param cssm CSSMatrix instance\n * @param v Tuple\n * @return the resulting Tuple\n */\nconst translatePoint = (\n  cssm: CSSMatrix,\n  v: [number, number, number, number],\n): [number, number, number, number] => {\n  let m = CSSMatrix.Translate(v[0], v[1], v[2]);\n\n  [, , , m.m44] = v;\n  m = cssm.multiply(m);\n\n  return [m.m41, m.m42, m.m43, m.m44];\n};\n\n/**\n * Returns the [x,y] projected coordinates for a given an [x,y] point\n * and an [x,y,z] perspective origin point.\n *\n * Equation found here =>\n * http://en.wikipedia.org/wiki/3D_projection#Diagram\n * Details =>\n * https://stackoverflow.com/questions/23792505/predicted-rendering-of-css-3d-transformed-pixel\n *\n * @param m the transformation matrix\n * @param point2D the initial [x,y] coordinates\n * @param origin the [x,y,z] transform origin\n * @returns the projected [x,y] coordinates\n */\nconst projection2d = (\n  m: CSSMatrix,\n  point2D: PointTuple,\n  origin: [number, number, number],\n): PointTuple => {\n  const [originX, originY, originZ] = origin;\n  const [x, y, z] = translatePoint(m, [point2D[0], point2D[1], 0, 1]);\n\n  const relativePositionX = x - originX;\n  const relativePositionY = y - originY;\n  const relativePositionZ = z - originZ;\n\n  return [\n    // protect against division by ZERO\n    relativePositionX * (Math.abs(originZ) / Math.abs(relativePositionZ) || 1) +\n    originX,\n    relativePositionY * (Math.abs(originZ) / Math.abs(relativePositionZ) || 1) +\n    originY,\n  ];\n};\nexport default projection2d;\n","import type { CSegment, CurveArray, MSegment, PathCommand } from \"../types\";\n\n/**\n * Reverses all segments of a `pathArray`\n * which consists of only C (cubic-bezier) path commands.\n *\n * @param path the source `pathArray`\n * @returns the reversed `pathArray`\n */\nconst reverseCurve = (path: CurveArray) => {\n  const rotatedCurve = path\n    .slice(1)\n    .map((x, i, curveOnly) =>\n      !i\n        ? path[0].slice(1).concat(x.slice(1) as number[])\n        : curveOnly[i - 1].slice(-2).concat(x.slice(1))\n    )\n    .map((x) => x.map((_, i) => x[x.length - i - 2 * (1 - (i % 2))]))\n    .reverse() as (MSegment | CSegment)[];\n\n  return [[\"M\" as PathCommand | number].concat(rotatedCurve[0].slice(0, 2))]\n    .concat(\n      rotatedCurve.map((x) => [\"C\" as PathCommand | number].concat(x.slice(2))),\n    ) as CurveArray;\n};\n\nexport default reverseCurve;\n","import type {\n  ASegment,\n  CSegment,\n  HSegment,\n  MSegment,\n  PathArray,\n  PathSegment,\n  PointTuple,\n  QSegment,\n  SSegment,\n  TSegment,\n  VSegment,\n} from \"../types\";\nimport pathToAbsolute from \"../convert/pathToAbsolute\";\nimport normalizePath from \"./normalizePath\";\nimport iterate from \"./iterate\";\n\n/**\n * Reverses all segments of a `pathArray` and returns a new `pathArray` instance\n * with absolute values.\n *\n * @param pathInput the source `pathArray`\n * @returns the reversed `pathArray`\n */\nconst reversePath = (pathInput: PathArray) => {\n  const absolutePath = pathToAbsolute(pathInput);\n  const normalizedPath = normalizePath(absolutePath);\n  const pLen = absolutePath.length;\n  const isClosed = absolutePath[pLen - 1][0] === \"Z\";\n\n  const reversedPath = iterate(absolutePath, (segment, i) => {\n    const normalizedSegment = normalizedPath[i];\n    const prevSeg = i && absolutePath[i - 1];\n    const prevCommand = prevSeg && prevSeg[0];\n    const nextSeg = absolutePath[i + 1];\n    const nextCommand = nextSeg && nextSeg[0];\n    const [pathCommand] = segment;\n    const [x, y] = normalizedPath[i ? i - 1 : pLen - 1].slice(-2) as PointTuple;\n    let result = segment;\n\n    switch (pathCommand) {\n      case \"M\":\n        result = (isClosed ? [\"Z\"] : [pathCommand, x, y]) as PathSegment;\n        break;\n      case \"A\":\n        result = [\n          pathCommand,\n          segment[1],\n          segment[2],\n          segment[3],\n          segment[4],\n          segment[5] === 1 ? 0 : 1,\n          x,\n          y,\n        ] as ASegment;\n        break;\n      case \"C\":\n        if (nextSeg && nextCommand === \"S\") {\n          result = [\"S\", segment[1], segment[2], x, y] as SSegment;\n        } else {\n          result = [\n            pathCommand,\n            segment[3],\n            segment[4],\n            segment[1],\n            segment[2],\n            x,\n            y,\n          ] as CSegment;\n        }\n        break;\n      case \"S\":\n        if (\n          prevCommand && \"CS\".includes(prevCommand) &&\n          (!nextSeg || nextCommand !== \"S\")\n        ) {\n          result = [\n            \"C\",\n            normalizedSegment[3],\n            normalizedSegment[4],\n            normalizedSegment[1],\n            normalizedSegment[2],\n            x,\n            y,\n          ] as CSegment;\n        } else {\n          result = [\n            pathCommand,\n            normalizedSegment[1],\n            normalizedSegment[2],\n            x,\n            y,\n          ] as SSegment;\n        }\n        break;\n      case \"Q\":\n        if (nextSeg && nextCommand === \"T\") {\n          result = [\"T\", x, y] as TSegment;\n        } else {\n          result = [pathCommand, segment[1], segment[2], x, y] as QSegment;\n        }\n        break;\n      case \"T\":\n        if (\n          prevCommand && \"QT\".includes(prevCommand) &&\n          (!nextSeg || nextCommand !== \"T\")\n        ) {\n          result = [\n            \"Q\",\n            normalizedSegment[1],\n            normalizedSegment[2],\n            x,\n            y,\n          ] as QSegment;\n        } else {\n          result = [pathCommand, x, y] as TSegment;\n        }\n        break;\n      case \"Z\":\n        result = [\"M\", x, y] as MSegment;\n        break;\n      case \"H\":\n        result = [pathCommand, x] as HSegment;\n        break;\n      case \"V\":\n        result = [pathCommand, y] as VSegment;\n        break;\n      default:\n        result = [pathCommand as typeof pathCommand | number].concat(\n          segment.slice(1, -2),\n          x,\n          y,\n        ) as PathSegment;\n    }\n\n    return result;\n  });\n\n  return (\n    isClosed\n      ? reversedPath.reverse()\n      : [reversedPath[0] as PathSegment].concat(reversedPath.slice(1).reverse())\n  ) as PathArray;\n};\n\nexport default reversePath;\n","import type { PathArray } from \"../types\";\nimport defaultOptions from \"../options/options\";\nimport iterate from \"./iterate\";\nimport roundSegment from \"./roundSegment\";\n\n/**\n * Rounds the values of a `pathArray` instance to\n * a specified amount of decimals and returns it.\n *\n * @param path the source `pathArray`\n * @param roundOption the amount of decimals to round numbers to\n * @returns the resulted `pathArray` with rounded values\n */\nconst roundPath = (path: PathArray, roundOption?: number | \"off\") => {\n  let { round } = defaultOptions;\n  // allow for ZERO decimals\n  round = roundOption === \"off\"\n    ? roundOption\n    : typeof roundOption === \"number\" && roundOption >= 0\n    ? roundOption\n    : typeof round === \"number\" && round >= 0\n    ? round\n    : /* istanbul ignore next @preserve */ \"off\";\n\n  /* istanbul ignore else @preserve */\n  if (round === \"off\") return path.slice(0) as PathArray;\n\n  return iterate<typeof path>(path, (segment) => {\n    return roundSegment(segment, round);\n  });\n};\nexport default roundPath;\n","import midPoint from \"../math/midPoint\";\nimport type { CubicSegment, PointTuple } from \"../types\";\n\n/**\n * Split a cubic-bezier segment into two.\n *\n * @param pts the cubic-bezier parameters\n * @param ratio the cubic-bezier parameters\n * @return two new cubic-bezier segments\n */\nconst splitCubic = (\n  pts: number[],\n  ratio = 0.5,\n): [CubicSegment, CubicSegment] => {\n  const t = ratio;\n  const p0 = pts.slice(0, 2) as PointTuple;\n  const p1 = pts.slice(2, 4) as PointTuple;\n  const p2 = pts.slice(4, 6) as PointTuple;\n  const p3 = pts.slice(6, 8) as PointTuple;\n  const p4 = midPoint(p0, p1, t);\n  const p5 = midPoint(p1, p2, t);\n  const p6 = midPoint(p2, p3, t);\n  const p7 = midPoint(p4, p5, t);\n  const p8 = midPoint(p5, p6, t);\n  const p9 = midPoint(p7, p8, t);\n\n  return [\n    [\"C\", p4[0], p4[1], p7[0], p7[1], p9[0], p9[1]],\n    [\"C\", p8[0], p8[1], p6[0], p6[1], p3[0], p3[1]],\n  ];\n};\nexport default splitCubic;\n","import paramsParser from \"../parser/paramsParser\";\nimport type {\n  AbsoluteCommand,\n  HSegment,\n  MSegment,\n  PathArray,\n  PointTuple,\n  RelativeCommand,\n  VSegment,\n} from \"../types\";\n\n/**\n * Split a path into an `Array` of sub-path strings.\n *\n * In the process, values are converted to absolute\n * for visual consistency.\n *\n * @param pathInput the source `pathArray`\n * @return an array with all sub-path strings\n */\nconst splitPath = (pathInput: PathArray): PathArray[] => {\n  const composite = [] as PathArray[];\n  let path: PathArray;\n  let pi = -1;\n  let x = 0;\n  let y = 0;\n  let mx = 0;\n  let my = 0;\n  const params = { ...paramsParser };\n\n  pathInput.forEach((seg) => {\n    const [pathCommand] = seg;\n    const absCommand = pathCommand.toUpperCase() as AbsoluteCommand;\n    const relCommand = pathCommand.toLowerCase() as RelativeCommand;\n    const isRelative = pathCommand === relCommand;\n    const values = seg.slice(1) as number[];\n\n    if (absCommand === \"M\") {\n      pi += 1;\n      [x, y] = values as PointTuple;\n      x += isRelative ? params.x : 0;\n      y += isRelative ? params.y : 0;\n      mx = x;\n      my = y;\n      path = [(isRelative ? [absCommand, mx, my] : seg) as MSegment];\n    } else {\n      if (absCommand === \"Z\") {\n        x = mx;\n        y = my;\n      } else if (absCommand === \"H\") {\n        [, x] = seg as HSegment;\n        x += isRelative ? params.x : /* istanbul ignore next @preserve */ 0;\n      } else if (absCommand === \"V\") {\n        [, y] = seg as VSegment;\n        y += isRelative ? params.y : /* istanbul ignore next @preserve */ 0;\n      } else {\n        [x, y] = seg.slice(-2) as PointTuple;\n        x += isRelative ? params.x : 0;\n        y += isRelative ? params.y : 0;\n      }\n      path.push(seg);\n    }\n\n    params.x = x;\n    params.y = y;\n    composite[pi] = path;\n  });\n\n  return composite;\n};\nexport default splitPath;\n","import getSVGMatrix from \"./getSVGMatrix\";\nimport projection2d from \"./projection2d\";\nimport defaultOptions from \"../options/options\";\nimport type {\n  AbsoluteArray,\n  AbsoluteSegment,\n  CSegment,\n  LSegment,\n  PathArray,\n  TransformObjectValues,\n} from \"../types\";\nimport type { TransformObject } from \"../interface\";\nimport iterate from \"./iterate\";\nimport parsePathString from \"../parser/parsePathString\";\nimport absolutizeSegment from \"./absolutizeSegment\";\nimport arcToCubic from \"./arcToCubic\";\n\n/**\n * Apply a 2D / 3D transformation to a `pathArray` instance.\n *\n * Since *SVGElement* doesn't support 3D transformation, this function\n * creates a 2D projection of the <path> element.\n *\n * @param path the `pathArray` to apply transformation\n * @param transform the transform functions `Object`\n * @returns the resulted `pathArray`\n */\nconst transformPath = (\n  pathInput: PathArray | string,\n  transform?: Partial<TransformObject>,\n) => {\n  // last x and y transformed values\n  let x = 0;\n  let y = 0;\n  // new x and y transformed\n  let lx = 0;\n  let ly = 0;\n  // segment params iteration index and length\n  let j = 0;\n  let jj = 0;\n  let pathCommand = \"M\";\n  // transform uses it's own set of params\n  const path = parsePathString(pathInput);\n  const transformProps = transform && Object.keys(transform);\n\n  // when used as a static method, invalidate somehow\n  if (!transform || (transformProps && !transformProps.length)) {\n    return path.slice(0) as typeof path;\n  }\n\n  // transform origin is extremely important\n  if (!transform.origin) {\n    Object.assign(transform, { origin: defaultOptions.origin });\n  }\n  const origin = transform.origin as [number, number, number];\n  const matrixInstance = getSVGMatrix(transform as TransformObjectValues);\n\n  if (matrixInstance.isIdentity) return path.slice(0) as typeof path;\n\n  return iterate<AbsoluteArray>(path, (seg, index, lastX, lastY) => {\n    [pathCommand] = seg;\n    const absCommand = pathCommand.toUpperCase();\n    const isRelative = absCommand !== pathCommand;\n    const absoluteSegment = isRelative\n      ? absolutizeSegment(seg, index, lastX, lastY)\n      : (seg.slice(0) as AbsoluteSegment);\n\n    let result = absCommand === \"A\"\n      // ? segmentToCubic(absoluteSegment, transformParams)\n      ? ([\"C\" as string | number].concat(\n        arcToCubic(\n          lastX,\n          lastY,\n          absoluteSegment[1] as number,\n          absoluteSegment[2] as number,\n          absoluteSegment[3] as number,\n          absoluteSegment[4] as number,\n          absoluteSegment[5] as number,\n          absoluteSegment[6] as number,\n          absoluteSegment[7] as number,\n        ),\n      ) as CSegment)\n      : absCommand === \"V\"\n      ? ([\"L\", lastX, absoluteSegment[1]] as LSegment)\n      : absCommand === \"H\"\n      ? ([\"L\", absoluteSegment[1], lastY] as LSegment)\n      : absoluteSegment;\n\n    // update pathCommand\n    pathCommand = result[0];\n    const isLongArc = pathCommand === \"C\" && result.length > 7;\n    const tempSegment =\n      (isLongArc ? result.slice(0, 7) : result.slice(0)) as AbsoluteSegment;\n\n    if (isLongArc) {\n      path.splice(\n        index + 1,\n        0,\n        [\"C\" as typeof pathCommand | number].concat(\n          result.slice(7),\n        ) as CSegment,\n      );\n      result = tempSegment as CSegment;\n    }\n\n    if (pathCommand === \"L\") {\n      [lx, ly] = projection2d(matrixInstance, [\n        (result as LSegment)[1],\n        (result as LSegment)[2],\n      ], origin);\n\n      /* istanbul ignore else @preserve */\n      if (x !== lx && y !== ly) {\n        result = [\"L\", lx, ly];\n      } else if (y === ly) {\n        result = [\"H\", lx];\n      } else if (x === lx) {\n        result = [\"V\", ly];\n      }\n    } else {\n      for (j = 1, jj = result.length; j < jj; j += 2) {\n        [lx, ly] = projection2d(\n          matrixInstance,\n          [+result[j], +result[j + 1]],\n          origin,\n        );\n        result[j] = lx;\n        result[j + 1] = ly;\n      }\n    }\n    // now update x and y\n    x = lx;\n    y = ly;\n\n    return result;\n  });\n};\n\nexport default transformPath;\n","\"use strict\";\nimport CSSMatrix from \"@thednp/dommatrix\";\nimport { PathArray, PointTuple, TransformObjectValues } from \"./types\";\nimport type { Options, TransformEntries, TransformObject } from \"./interface\";\nexport * from \"./types\";\nexport * from \"./interface\";\nimport defaultOptions from \"./options/options\";\n\nimport pathToAbsolute from \"./convert/pathToAbsolute\";\nimport pathToRelative from \"./convert/pathToRelative\";\nimport pathToCurve from \"./convert/pathToCurve\";\nimport pathToString from \"./convert/pathToString\";\nimport * as arcTools from \"./math/arcTools\";\nimport {\n  bezierLength,\n  calculateBezier,\n  CBEZIER_MINMAX_EPSILON,\n  computeBezier,\n  Cvalues,\n  deriveBezier,\n  getBezierLength,\n  minmaxC,\n  minmaxQ,\n  Tvalues,\n} from \"./math/bezier\";\nimport {\n  getCubicBBox,\n  getCubicLength,\n  getPointAtCubicLength,\n  getPointAtCubicSegmentLength,\n} from \"./math/cubicTools\";\nimport {\n  getLineBBox,\n  getLineLength,\n  getPointAtLineLength,\n} from \"./math/lineTools\";\nimport {\n  getPointAtQuadLength,\n  getPointAtQuadSegmentLength,\n  getQuadBBox,\n  getQuadLength,\n} from \"./math/quadTools\";\nimport { polygonArea, polygonLength } from \"./math/polygonTools\";\n\nimport distanceSquareRoot from \"./math/distanceSquareRoot\";\nimport midPoint from \"./math/midPoint\";\nimport rotateVector from \"./math/rotateVector\";\nimport roundTo from \"./math/roundTo\";\n\nimport error from \"./parser/error\";\nimport parsePathString from \"./parser/parsePathString\";\nimport finalizeSegment from \"./parser/finalizeSegment\";\nimport invalidPathValue from \"./parser/invalidPathValue\";\nimport isArcCommand from \"./parser/isArcCommand\";\nimport isDigit from \"./parser/isDigit\";\nimport isDigitStart from \"./parser/isDigitStart\";\nimport isMoveCommand from \"./parser/isMoveCommand\";\nimport isPathCommand from \"./parser/isPathCommand\";\nimport isSpace from \"./parser/isSpace\";\nimport paramsCount from \"./parser/paramsCount\";\nimport paramsParser from \"./parser/paramsParser\";\nimport pathParser from \"./parser/pathParser\";\nimport scanFlag from \"./parser/scanFlag\";\nimport scanParam from \"./parser/scanParam\";\nimport scanSegment from \"./parser/scanSegment\";\nimport skipSpaces from \"./parser/skipSpaces\";\n\nimport distanceEpsilon from \"./util/distanceEpsilon\";\nimport getClosestPoint from \"./util/getClosestPoint\";\nimport getDrawDirection from \"./util/getDrawDirection\";\nimport getPathArea from \"./util/getPathArea\";\nimport getPathBBox from \"./util/getPathBBox\";\nimport getPointAtLength from \"./util/getPointAtLength\";\nimport getPropertiesAtLength from \"./util/getPropertiesAtLength\";\nimport getPropertiesAtPoint from \"./util/getPropertiesAtPoint\";\nimport getSegmentAtLength from \"./util/getSegmentAtLength\";\nimport getSegmentOfPoint from \"./util/getSegmentOfPoint\";\nimport getTotalLength from \"./util/getTotalLength\";\n\nimport isAbsoluteArray from \"./util/isAbsoluteArray\";\nimport isCurveArray from \"./util/isCurveArray\";\nimport isNormalizedArray from \"./util/isNormalizedArray\";\nimport isPathArray from \"./util/isPathArray\";\nimport isPointInStroke from \"./util/isPointInStroke\";\nimport isRelativeArray from \"./util/isRelativeArray\";\nimport isValidPath from \"./util/isValidPath\";\nimport shapeParams from \"./util/shapeParams\";\nimport shapeToPath from \"./util/shapeToPath\";\nimport shapeToPathArray from \"./util/shapeToPathArray\";\n\nimport absolutizeSegment from \"./process/absolutizeSegment\";\nimport arcToCubic from \"./process/arcToCubic\";\nimport getSVGMatrix from \"./process/getSVGMatrix\";\nimport iterate from \"./process/iterate\";\nimport lineToCubic from \"./process/lineToCubic\";\nimport normalizePath from \"./process/normalizePath\";\nimport normalizeSegment from \"./process/normalizeSegment\";\nimport optimizePath from \"./process/optimizePath\";\nimport projection2d from \"./process/projection2d\";\nimport quadToCubic from \"./process/quadToCubic\";\nimport relativizeSegment from \"./process/relativizeSegment\";\nimport reverseCurve from \"./process/reverseCurve\";\nimport reversePath from \"./process/reversePath\";\nimport roundPath from \"./process/roundPath\";\nimport roundSegment from \"./process/roundSegment\";\nimport segmentToCubic from \"./process/segmentToCubic\";\nimport shortenSegment from \"./process/shortenSegment\";\nimport splitCubic from \"./process/splitCubic\";\nimport splitPath from \"./process/splitPath\";\nimport transformPath from \"./process/transformPath\";\n\n/**\n * Creates a new SVGPathCommander instance with the following properties:\n * * segments: `pathArray`\n * * round: number\n * * origin: [number, number, number?]\n *\n * @class\n * @author thednp <https://github.com/thednp/svg-path-commander>\n * @returns a new SVGPathCommander instance\n */\nclass SVGPathCommander {\n  public static CSSMatrix = CSSMatrix;\n  public static pathToAbsolute = pathToAbsolute;\n  public static pathToRelative = pathToRelative;\n  public static pathToCurve = pathToCurve;\n  public static pathToString = pathToString;\n  public static arcTools = arcTools;\n  public static bezierTools = {\n    Cvalues,\n    Tvalues,\n    minmaxC,\n    minmaxQ,\n    getBezierLength,\n    bezierLength,\n    calculateBezier,\n    computeBezier,\n    deriveBezier,\n    CBEZIER_MINMAX_EPSILON,\n  };\n  public static cubicTools = {\n    getCubicLength,\n    getCubicBBox,\n    getPointAtCubicLength,\n    getPointAtCubicSegmentLength,\n  };\n  public static lineTools = {\n    getPointAtLineLength,\n    getLineBBox,\n    getLineLength,\n  };\n  public static quadTools = {\n    getPointAtQuadSegmentLength,\n    getQuadLength,\n    getQuadBBox,\n    getPointAtQuadLength,\n  };\n  public static polygonTools = { polygonArea, polygonLength };\n  public static distanceSquareRoot = distanceSquareRoot;\n  public static distanceEpsilon = distanceEpsilon;\n  public static midPoint = midPoint;\n  public static rotateVector = rotateVector;\n  public static roundTo = roundTo;\n  public static finalizeSegment = finalizeSegment;\n  public static invalidPathValue = invalidPathValue;\n  public static isArcCommand = isArcCommand;\n  public static isDigit = isDigit;\n  public static isDigitStart = isDigitStart;\n  public static isMoveCommand = isMoveCommand;\n  public static isPathCommand = isPathCommand;\n  public static isSpace = isSpace;\n  public static paramsCount = paramsCount;\n  public static paramsParser = paramsParser;\n  public static pathParser = pathParser;\n  public static scanFlag = scanFlag;\n  public static scanParam = scanParam;\n  public static scanSegment = scanSegment;\n  public static skipSpaces = skipSpaces;\n  public static getPathBBox = getPathBBox;\n  public static getPathArea = getPathArea;\n  public static getTotalLength = getTotalLength;\n  public static getDrawDirection = getDrawDirection;\n  public static getPointAtLength = getPointAtLength;\n  public static getPropertiesAtLength = getPropertiesAtLength;\n  public static getPropertiesAtPoint = getPropertiesAtPoint;\n  public static getClosestPoint = getClosestPoint;\n  public static getSegmentOfPoint = getSegmentOfPoint;\n  public static getSegmentAtLength = getSegmentAtLength;\n  public static isPointInStroke = isPointInStroke;\n  public static isValidPath = isValidPath;\n  public static isPathArray = isPathArray;\n  public static isAbsoluteArray = isAbsoluteArray;\n  public static isRelativeArray = isRelativeArray;\n  public static isCurveArray = isCurveArray;\n  public static isNormalizedArray = isNormalizedArray;\n  public static shapeToPath = shapeToPath;\n  public static shapeToPathArray = shapeToPathArray;\n  public static shapeParams = shapeParams;\n  public static parsePathString = parsePathString;\n  public static absolutizeSegment = absolutizeSegment;\n  public static arcToCubic = arcToCubic;\n  public static getSVGMatrix = getSVGMatrix;\n  public static iterate = iterate;\n  public static lineToCubic = lineToCubic;\n  public static normalizePath = normalizePath;\n  public static normalizeSegment = normalizeSegment;\n  public static optimizePath = optimizePath;\n  public static projection2d = projection2d;\n  public static quadToCubic = quadToCubic;\n  public static relativizeSegment = relativizeSegment;\n  public static reverseCurve = reverseCurve;\n  public static reversePath = reversePath;\n  public static roundPath = roundPath;\n  public static roundSegment = roundSegment;\n  public static segmentToCubic = segmentToCubic;\n  public static shortenSegment = shortenSegment;\n  public static splitCubic = splitCubic;\n  public static splitPath = splitPath;\n  public static transformPath = transformPath;\n  // declare class properties\n  declare segments: PathArray;\n  declare round: number | \"off\";\n  declare origin: [number, number, number];\n\n  /**\n   * @constructor\n   * @param pathValue the path string\n   * @param config instance options\n   */\n  constructor(pathValue: string, config?: Partial<Options>) {\n    const instanceOptions = config || {};\n    const undefPath = typeof pathValue === \"undefined\";\n\n    if (undefPath || !pathValue.length) {\n      throw TypeError(\n        `${error}: \"pathValue\" is ${undefPath ? \"undefined\" : \"empty\"}`,\n      );\n    }\n\n    this.segments = parsePathString(pathValue);\n\n    // // set instance options.round\n    const { round: roundOption, origin: originOption } = instanceOptions;\n    let round: number | \"off\";\n\n    if (Number.isInteger(roundOption) || roundOption === \"off\") {\n      round = roundOption as number | \"off\";\n    } else {\n      round = defaultOptions.round as number;\n    }\n\n    // set instance options.origin\n    // the SVGPathCommander class will always override the default origin\n    let origin = defaultOptions.origin as [number, number, number];\n    /* istanbul ignore else @preserve */\n    if (Array.isArray(originOption) && originOption.length >= 2) {\n      const [originX, originY, originZ] = originOption.map(Number);\n      origin = [\n        !Number.isNaN(originX) ? originX : 0,\n        !Number.isNaN(originY) ? originY : 0,\n        !Number.isNaN(originZ) ? originZ : 0,\n      ];\n    }\n\n    this.round = round;\n    this.origin = origin;\n\n    return this;\n  }\n  get bbox() {\n    return getPathBBox(this.segments);\n  }\n  get length() {\n    return getTotalLength(this.segments);\n  }\n\n  /**\n   * Returns the path bounding box, equivalent to native `path.getBBox()`.\n   *\n   * @public\n   * @returns the pathBBox\n   */\n  getBBox() {\n    return this.bbox;\n  }\n\n  /**\n   * Returns the total path length, equivalent to native `path.getTotalLength()`.\n   *\n   * @public\n   * @returns the path total length\n   */\n  getTotalLength() {\n    return this.length;\n  }\n\n  /**\n   * Returns an `{x,y}` point in the path stroke at a given length,\n   * equivalent to the native `path.getPointAtLength()`.\n   *\n   * @public\n   * @param length the length\n   * @returns the requested point\n   */\n  getPointAtLength(length: number) {\n    return getPointAtLength(this.segments, length);\n  }\n\n  /**\n   * Convert path to absolute values\n   *\n   * @public\n   */\n  toAbsolute() {\n    const { segments } = this;\n    this.segments = pathToAbsolute(segments);\n    return this;\n  }\n\n  /**\n   * Convert path to relative values\n   *\n   * @public\n   */\n  toRelative() {\n    const { segments } = this;\n    this.segments = pathToRelative(segments);\n    return this;\n  }\n\n  /**\n   * Convert path to cubic-bezier values. In addition, un-necessary `Z`\n   * segment is removed if previous segment extends to the `M` segment.\n   *\n   * @public\n   */\n  toCurve() {\n    const { segments } = this;\n    this.segments = pathToCurve(segments);\n    return this;\n  }\n\n  /**\n   * Reverse the order of the segments and their values.\n   *\n   * @param onlySubpath option to reverse all sub-paths except first\n   * @public\n   */\n  reverse(onlySubpath?: boolean) {\n    const { segments } = this;\n    const split = splitPath(segments);\n    const subPath = split.length > 1 ? split : false;\n\n    const absoluteMultiPath = subPath\n      ? subPath.map((x, i) => {\n        if (onlySubpath) {\n          return i ? reversePath(x) : x.slice(0);\n        }\n        return reversePath(x);\n      })\n      : segments.slice(0);\n\n    let path = [] as unknown as PathArray;\n    if (subPath) {\n      path = absoluteMultiPath.flat(1) as PathArray;\n    } else {\n      path = onlySubpath ? segments : reversePath(segments);\n    }\n\n    this.segments = path.slice(0) as PathArray;\n    return this;\n  }\n\n  /**\n   * Normalize path in 2 steps:\n   * * convert `pathArray`(s) to absolute values\n   * * convert shorthand notation to standard notation\n   *\n   * @public\n   */\n  normalize() {\n    const { segments } = this;\n    this.segments = normalizePath(segments);\n    return this;\n  }\n\n  /**\n   * Optimize `pathArray` values:\n   * * convert segments to absolute and/or relative values\n   * * select segments with shortest resulted string\n   * * round values to the specified `decimals` option value\n   *\n   * @public\n   */\n  optimize() {\n    const { segments } = this;\n    const round = this.round === \"off\" ? 2 : this.round;\n\n    this.segments = optimizePath(segments, round);\n    return this;\n  }\n\n  /**\n   * Transform path using values from an `Object` defined as `transformObject`.\n   *\n   * @see TransformObject for a quick refference\n   *\n   * @param source a `transformObject`as described above\n   * @public\n   */\n  transform(source?: Partial<TransformObject>) {\n    if (\n      !source ||\n      typeof source !== \"object\" ||\n      (typeof source === \"object\" &&\n        ![\"translate\", \"rotate\", \"skew\", \"scale\"].some((x) => x in source))\n    ) {\n      return this;\n    }\n\n    const {\n      segments,\n      origin: [cx, cy, cz],\n    } = this;\n    const transform = {} as TransformObjectValues;\n    for (const [k, v] of Object.entries(source) as TransformEntries) {\n      // istanbul ignore else @preserve\n      if (k === \"skew\" && Array.isArray(v)) {\n        transform[k] = v.map(Number) as PointTuple;\n      } else if (\n        (k === \"rotate\" || k === \"translate\" || k === \"origin\" ||\n          k === \"scale\") && Array.isArray(v)\n      ) {\n        transform[k] = v.map(Number) as [number, number, number];\n      } else if (k !== \"origin\" && typeof Number(v) === \"number\") {\n        transform[k] = Number(v);\n      }\n    }\n\n    // if origin is not specified\n    // it's important that we have one\n    const { origin } = transform;\n\n    if (Array.isArray(origin) && origin.length >= 2) {\n      const [originX, originY, originZ] = origin.map(Number);\n      transform.origin = [\n        !Number.isNaN(originX) ? originX : cx,\n        !Number.isNaN(originY) ? originY : cy,\n        originZ || cz,\n      ];\n    } else {\n      transform.origin = [cx, cy, cz];\n    }\n\n    this.segments = transformPath(segments, transform);\n    return this;\n  }\n\n  /**\n   * Rotate path 180deg vertically\n   *\n   * @public\n   */\n  flipX() {\n    const { cx, cy } = this.bbox;\n    this.transform({ rotate: [0, 180, 0], origin: [cx, cy, 0] });\n    return this;\n  }\n\n  /**\n   * Rotate path 180deg horizontally\n   *\n   * @public\n   */\n  flipY() {\n    const { cx, cy } = this.bbox;\n    this.transform({ rotate: [180, 0, 0], origin: [cx, cy, 0] });\n    return this;\n  }\n\n  /**\n   * Export the current path to be used\n   * for the `d` (description) attribute.\n   *\n   * @public\n   * @return the path string\n   */\n  toString() {\n    return pathToString(this.segments, this.round);\n  }\n\n  /**\n   * Remove the instance.\n   *\n   * @public\n   * @return void\n   */\n  dispose() {\n    Object.keys(this).forEach((key) => delete this[key as keyof typeof this]);\n  }\n}\n\nexport default SVGPathCommander;\n"],"names":["Z","z","s","e","p","$","E","P","y","g","n","i","r","a","m","h","c","u","f","w","o","d","b","X","O","x","Y","F","T","k","I","v","R","D","N","defaultOptions","paramsCount","finalizeSegment","path","pathCommand","relativeCommand","data","error","scanFlag","index","pathValue","code","isDigit","invalidPathValue","scanParam","max","start","zeroFirst","hasCeiling","hasDecimal","hasDot","ch","isSpace","skipSpaces","isPathCommand","isDigitStart","isArcCommand","isMoveCommand","scanSegment","_a","segments","cmdCode","reqParams","paramCounts","lastSegment","PathParser","pathString","parsePathString","pathInput","absolutizeSegment","segment","lastX","lastY","absCommand","absValues","seglen","j","iterate","iterator","pathLen","isRelative","mx","my","segLen","iteratorResult","pathToAbsolute","relativizeSegment","relCommand","relValues","pathToRelative","rotateVector","rad","sin","cos","arcToCubic","X1","Y1","RX","RY","angle","LAF","SF","X2","Y2","recursive","x1","y1","rx","ry","x2","y2","d120","res","xy","f1","f2","cx","cy","rx2","ry2","df","f2old","x2old","y2old","c1","s1","c2","s2","t","hx","hy","m1","m2","m3","m4","newres","ii","quadToCubic","qx","qy","r13","r23","midPoint","ax","ay","bx","by","lineToCubic","segmentToCubic","params","values","px1","py1","px","py","normalizeSegment","px2","py2","nqx","nqy","paramsParser","pathToCurve","seg","normalSegment","result","roundTo","round","pow","pathToString","roundOption","valLen","distanceSquareRoot","getLineLength","getPointAtLineLength","distance","point","length","getLineBBox","min","arcLength","theta","halfTheta","sinHalfTheta","cosHalfTheta","term1","term2","arcPoint","alpha","cosA","sinA","angleBetween","v0","v1","v0x","v0y","v1x","v1y","getArcProps","abs","sqrt","PI","xRotRad","dx","dy","transformedPoint","radiiCheck","cSquareNumerator","cSquareRootDenom","cRadicand","cCoef","transformedCenter","center","startVector","startAngle","endVector","sweepAngle","endAngle","getArcLength","getPointAtArcLength","ellipseComponentX","ellipseComponentY","getArcBBox","deltaAngle","tan","atan2","tangent","angle1","angle2","angle3","angle4","xArray","yArray","xMin","xMax","yMin","yMax","angleAfterStart","pP2","angleBeforeEnd","pP3","p1","p2","p4","p3","Tvalues","Cvalues","deriveBezier","points","dpoints","list","computeBezier","order","mt","mt2","t2","calculateBezier","derivativeFn","l","bezierLength","len","sum","getBezierLength","curve","idx","step","CBEZIER_MINMAX_EPSILON","minmaxQ","cp","v2","minmaxC","cp1","cp2","K","S","L","Q","getPointAtCubicSegmentLength","c1x","c1y","c2x","c2y","t1","getCubicLength","getPointAtCubicLength","distanceIsNumber","currentLength","getCubicBBox","cxMinMax","cyMinMax","getPointAtQuadSegmentLength","getQuadLength","getPointAtQuadLength","getQuadBBox","polygonArea","polygon","area","polygonLength","DISTANCE_EPSILON","normalizePath","_","getPointAtLength","isM","POINT","totalLength","getTotalLength","paramX1","paramY1","paramX2","paramY2","paramQX","paramQY","absoluteSegment","cp1x","cp1y","getPropertiesAtLength","pathArray","pathTemp","pathLength","lengthAtSegment","getPropertiesAtPoint","normalPath","distanceTo","precision","scan","closest","scanDistance","bestLength","bestDistance","scanLength","before","after","beforeLength","afterLength","beforeDistance","afterDistance","getClosestPoint","getCubicSegArea","getPathArea","getDrawDirection","getPathBBox","minX","minY","maxX","maxY","width","height","getSegmentAtLength","getSegmentOfPoint","isPathArray","lk","isAbsoluteArray","isNormalizedArray","pc","isCurveArray","isPointInStroke","isRelativeArray","isValidPath","shapeParams","isElement","node","getLinePath","attr","getPolyPath","getCirclePath","getEllipsePath","getRectanglePath","shapeToPathArray","element","supportedShapes","targetIsElement","tagName","type","shapeAttrs","config","shapeToPath","replace","ownerDocument","doc","description","name","value","getSVGMatrix","transform","matrix","CSSMatrix","origin","originX","originY","translate","rotate","skew","scale","shortenSegment","prevCommand","defaultRound","normalValues","nx","ny","nx1","ny1","roundSegment","optimizePath","optimParams","allPathCommands","normalizedSegment","shortSegment","absSegment","absString","relativeSegment","relSegment","relString","translatePoint","cssm","projection2d","point2D","originZ","relativePositionX","relativePositionY","relativePositionZ","reverseCurve","rotatedCurve","curveOnly","reversePath","absolutePath","normalizedPath","pLen","isClosed","reversedPath","prevSeg","nextSeg","nextCommand","roundPath","splitCubic","pts","ratio","p0","p5","p6","p7","p8","p9","splitPath","composite","pi","transformPath","lx","ly","jj","transformProps","matrixInstance","isLongArc","tempSegment","SVGPathCommander","instanceOptions","undefPath","originOption","onlySubpath","split","subPath","absoluteMultiPath","source","cz","key","__publicField","arcTools","distanceEpsilon","pathParser"],"mappings":"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","x_google_ignoreList":[0]}